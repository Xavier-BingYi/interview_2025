undefined
我們繼續上一次的這個課程內容。我們上一次跟同學提到，在這個MIPS裡面，我們在做function code的時候，Coder跟Cody，他們就是負責這個Coder是負責這個T0 T9，然後Cody是負責S系列那我們這一堂課還會看到，就有所謂的這個Global pointer它是for static data另外還有stack pointer就是sp還有frame pointer fp還有所謂的我們就是之前提過的return address就是ra register。我們這邊看到兩個指令，這兩個指令其實就是構成我們在maps裡面執行procedural call

第一個是procedural codejump and link就是JAL，這個JAL後面接的就是procedural的level，look you要跳到哪一個位置你把level把它寫進來，你在某一個地方也定義這個level，它就會jump到這個位置另外有code的話就有return這個return就是JR然後後面再加這個RA register那它就是要把這個JumpRegister就是Return的Register的內容把它複製到這個ProgramCounter因為我們知道

說ProgramCounter就是指到我們現在在執行的這個instruction當你要回到前面的這個caller的話我們就是要把回到caller的那個指令的位置記在這個RA然後把RA再存到ProgramCounter這樣子等到他下一次去Program Counter去讀資料的時候他就會讀到Caller下一個要執行的指令所以JAL跟JR這兩個合成一個Caller去Call還有Return這樣子的一個Operation這邊有提到JR也可以用在Case

就是說我們有一個switchA然後case1 case2 case3 case4類似這樣子有multiple choicemultiple choice我們知道說你執行完一個就是它如果滿足某一個condition然後執行完之後我們會希望它離開不要說再繼續執行下面的類似像這一類的就是有這一種可以跳到某一個地方我們可以利用這樣子的方式來实现这个边有一个很简单的

例子就是它有一个C codeC code就是G加H然后再减掉I加J这个减完之后把这个结果存到这个F假设这一个procedure它就叫leave ExampleLeaveExample的意思这个为什么叫leaveExample呢因为它的意思就是说我们在做一个procedure code同學可以把它看成好像是一棵Tree一樣Color是在上面如果说A扣B的话A它就是B的Parent它好像是一棵Tree這樣子一直往下扣它為什麼是Leaf呢因为它没有在扣别人所以它不会是其他的Node的Parent所以它就是Leaf

所以這邊同學可以看到在這個 function 叫 leaveExample 裡面它沒有在 call 別人它就是到這邊做完結束就 return我們假設說我們的 g, h, i, z這四個 variable 它分別存在我們就是把它放在 a0因為它是當作一個參數把它傳到這個 procedure叫 a0, a1, a2, a3這個 f這個local variable f是使用這個s0根據我們前面介紹就是說這個

leaveExample它是call裡它是被呼叫者我們就是說這邊的s0我們使用s0我們先把它save起來save起來使用s0之後要return的時候再把原本的s0的值再把它copy回去然後最後它的return value是存在v0所以接著我們來看這樣子的一個範例在我們的mips裡面它大概是怎麼做首先我們原始的call我們是不考慮到就是說我們沒有考慮到我們前面提到的前面提到什麼呢前面提到說caller負責誰coli負責誰我們假設

就是没有这样子的一个分工我们就是说你用到什么你就要把它save起来你用到哪一个就要save起来我们在这边首先我们假设g加h是存在t0然后i加z这个temporal的一个value是存在t1然后这一个我们刚知道说f是存在s0因为我们现在说S0 T0 T1我們在這一個proced

ure裡面就用到這三個local就是說這三個register會被使用到所以我們就是要把這三個register把它save起來save起來怎麼save呢它首先就是ADDI就是把SP就是step pointerstep pointer它是指到我這一個procedure它可以使用的memory的最上面的位置它使用的方向是由上往下它使用的是由上往下所以它就是如果要用這個的時候

它最高的位置SP就指到這裡所以它就用了這一塊用了這一塊它已經被用掉了所以它下一個最高位置可以使用的就是它下面的這個位置就是像我們這邊指的這個顏色表示說這已經被人家使用了所以已經被人家使用了那它下面這些這空白表示說我們可以使用它所以 sp 是指在這個地方它減掉 12 的話就是把 sp

指到這個位置來因為我們知道說一個 word就是一個 word 是四個四個位置所以它就是三個就是減 121 2 3 就是減到這個地方所以同學可以看到當它 storeStore就是把S0這個值原本S0的value存到這個位置這個位置是哪裡呢就是這個地方 S0然後T0就是SP加4SP是指到這裡加4就是這一個第二個然後T1它是把它存到SP加4加8所以這邊是T1所以我們就是把

這邊 s0 t0 t1這三個register把它存到memory裡面的這三個word所以同學可以發現說存完以後它最高的可以使用的location的位置在什麼地方呢就是這一個所以它這樣子我們如果說沒有按照我們前面的方式分工的方式因為它用掉這三個所以我們就要把這三個把它save起來save起來之後我們就可以

開始來做g加hg加h然後存到t0然後這個i加j存到t1接著就是這個g加h減掉i加j然後存到s0s0就是f接著我們就把這個f再move到什麼地方move到v0就是returnregister所以它就是v0就把它move到這個地方來move過來之後它就要return回去了那return回去我們

再把這三個register原本的詞再把它restore回來所以就是sp加 0 restore到s0sp加4 restore到t0sp加8 restore到t1所以你restore完這三個就是做restore的動作restore完之後ADDI還是做什麼呢就是去update sp因為這三個已經restore完了所以這三個suppose要把它清掉就表示說這三個memory location它又恢復可以使

用所以你必須要把sp再把它update到這個地方所以這邊是減12這邊就是再加12那就把sp再restoreupdate到這裡這樣子的話呢就整個這個leave example它的執行就全部都結束他的工作就全部都做完了他除了做了這一個operation的動作然後把這個結果把它存到return的register v0之外他也試著讓s0

t0 t1都沒有受到任何的影響他沒有受到任何的影響所以接著就return回去所以這個是我們第一個版本的結果是這個樣子但是我們前面提到說我們這個leaf example它是coliColding它只需要負責S0所以它只需要做S0的Save跟RestoreT0跟T1要不要做呢 不關它的事T0 T1它不用去管

因為T0 T1是ColderColder它如果說扣LeafExample扣完之後它還需要 T0 T1的值的話Colder它在扣LeafExample之前它自然而然就必須要去SaveT0 T1它如果不care T0 T1是什麼因為它根本不會用到T0 T1它根本不需要去save不需要去save這兩個所以它不需要save這

兩個我們假設說Color它其實根本不需要使用到T0跟T1T0 T1裡面沒有存它要的值所以在Color那個地方它根本不會去save T0 T1根據我們的分工的方式在coding這個地方這兩個也不用save也不用restore所以我們可以發現在leaveExample這個程式裡面我們就可以去掉四個instruction我們可以少執行四個instruction四個其實已經很多了因為你一個function你可能會被code非常非常多的次數所以你被code的次數非常非常多的時候

這乘以4你就可以省掉非常多的instruction的執行所以我們很明顯根據我們前面提到的這種機制我們這個coding是responsible for xseries所以它只需要save然後再restore其他的當然這邊你必須要update成-4這邊要update成正式所以就我們的最後一個版本看起來應該就是要長這個樣子它是比較compact 比較 efficient的一種方式當然，如果caller它也是需要用到T01，那它也是safe，

也是store那就沒有誰比較快的問題，所以這邊就是我們剛剛前面我們把一些不必要的指令把它刪除之後，它的結果大概就是長這個樣子。前面的一个例子是lift example，它是一个lift procedure，如果说它是一个non-lift procedure/non-lift procedure就是說它是coli，也是 cola，它是coli因为它比如說A扣B 是 coli，B又扣C，然後對C而言B是 cola，所以這個时候這個B

它就是所謂的 non-leave procedure。另外，我們常看到的一種recursive call，它雖然是一個procedure，但是它是自己扣自己，所以它會一直在那邊扣直到碰到最底下那一層，它才會 return 回去，所以類似像這一種它在中間所有的那些 function procedure，它也是屬於 non-leave procedure屬於這種non-leave procedure 的話，同學要注意就是說因為它本身會被別人扣它要扣別人，

所以它必須要去maintain什麼呢，就是所謂的return address還有所謂的argument。我們先來看這個例子，這個rec ursive call它就是n接算這個n接的值如果n小於1的話它就return 1如果N大於1的話它是return N-1所以這個fact它又是code它自己所以這是標準的一個recursive code我們假設說我們說這個N它唯一的

argumentN它當然是存在A0它的return value它會存在這個V0就是你要return 1你就把這個1save在這個V0這個register所以這是一個簡單的一個recursive code這個是我們在這邊看到的它的一個solution我們來看另外一個這個recursive code它的問題是在什麼地方呢它的問題就是說這個register它是一直被重複使用它是被所謂的這種nested procedure就是A先用然後用完它又換B用所以它是sequentially的一直在使用這些register

所以我們要考慮到所謂的Speeding RegisterSpeeding Register我們知道說Color是T-seriesCody是S-series在這個地方我們還有討論到所謂的ArgumentArgument在Color我們同學這邊就要注意就是說Color它為什麼要去Save這個Argument因為假設我們知道說Color它就是要去呼叫別人當它呼叫別人的時候它一定是要傳一些argument給這個coding所以它一定要把值coder要扣別人的時候它一定要

把值去存到這個A系列的register它要把這個register把它改掉可是如果說這個coder本身它也是codingcoder本身它也是被呼叫者被呼叫者比如說A扣B所以B要執行的時候A要把一些值把它存到A0 A1 A2 A3所以B他就可以去找這個A0 A1 A2 A3去做他要的operation這個時候B要扣C所以B要把值把它傳給C傳給C怎麼傳呢B要把值一樣是save到A0 A1 A2 A3所以B他身兼什麼呢

它被 B 被 A 呼叫所以它是 calling它有接收到 A 傳下來的值傳下來的值是存在這個現在 B 又要去扣 C它又要把這個值寫到哪裡寫到 A0 A1 A2 A3所以 A0 A1 A2 A3你必須要把它 save 起來因為你 C return 回到 B 的時候你這個時候 B 再繼續執行它可能需要用到 A 傳過來的值所以A

是A傳過來的只是存在A0 A1 A2 A3所以它必須要去save這個A series的這個valueCody很明顯我們知道說這個Cody它必須要去save什麼呢它必須要去save這個register這個ret urn這是return address，它必須要save這個RA，這個register就是return address，因為我們說你被呼叫者，你執行完之後，你要return回這個caller，所以你

要把這個值save起來，因為當你是被呼叫者，你b是被呼叫者，然後你b又去扣cb又去扣c所以你b扣c的時候，你c在執行的時候，這個RA要save什麼呢？要save return到b的address，所以你這個時候，你就會把這個回到A的address把它給蓋掉，所以你就必須要把這個RA把它save起來，你這樣子C return到B的時候，它就會再把這個B return到A的address，again把它restore回來，所以這個就是我們提到的這邊A0 A1 A2 A3然後還有這所謂的argument register還有這個return address

這個register，這兩個記得要把它save起來，所以如果是Nestive的procedure，就是必須要加上這樣子的一個觀念這樣子的觀念有之後我們就可以來看這個簡單的recursive call所以我們可以看到的我們看到什麼呢？我們看到的就是說這邊它的call很簡單，它說a如果小於1的話，就return 1它要執行之前，因為我們知道說這

一個function它會去call它會去call別人然後這一個它又是被別人call所以它本身它是身兼什麼呢身兼caller還有身兼callee這兩個角色最底層那一個不是caller除此之外全部都是callee兼caller的角色因為它身兼了這兩個角色所以它一定要把這個argument跟return address全部save起來所以這邊這個是argument

這邊是return address這兩個全部都要save起來這兩個save起來就是-8sp值的位置就是存a0sp加4的位置就是存return address所以你把它save起來之後接著我們就開始來比對說n是不是小於等於1N如果小於1的話我們這邊就會怎麼樣呢我們這邊就會做return1的一個動作這邊return1就是把1把它set到這個return value V0這個register接著再把這個SP restore這邊減8 這邊加8就把它還原這兩個還原之後你就直接就return回去了

同學會說你這邊怎麼沒有load這邊不是store你不是還要把它load回來嗎因為這邊的code實在太簡單了我們知道說你一路下來如果是從這邊就直接執行到這裡的話這兩個根本沒有機會被改變對不對這兩個register根本沒有機會被改變所以你不需要restore你只是把它save之後然後就把這個sp的pointer

再Restore至於RAA0這兩個不需要Restore因為它不會被Update所以你就如果是小於1就Return如果是大於1你就要再去扣這個東西扣這個Factor所以你要扣Factor它就是Jump到L1這邊你就是把N做一個-1的動作接著再去扣它再扣自己所以你就是做了這樣子的一個動作后面的

这一部分就是说当你call它你去call fact当你碰到最底层那一个它return的时候它会return到哪里它会return到你呼叫的指令下面的那一行我们呼叫别人的时候是在这里呼叫你return回来的时候就return到呼叫的下面这一行这一行是做什么呢下面这一行其实就是你要去returnn乘以fact n-1

就是把剛剛底下那一層的結果傳回來再乘以n所以它回來之後你就是把這一層它的RA跟A0先把它restore所以這四個就是把它restore那restore完之後再把剛剛傳回來的value再乘以n這個我們剛剛已經restore成這一層的n了所以就是这层的N再乘以这个乘以这个然后乘完之后再Safe到

这个V0接着就Return回去就是这样子所以在这个地方就是这边的对应这个地方这样子的一个机制同学就要注意就是说它等于就是虽然我们都是只有一个RA跟A0但是它有不同层不同層 RA 跟 A0 就有它自己不同層的值所以你必須要去 maintain 每一層的 RA 跟 A0要確保它不會說你現在是在 DI 層結果你現在的 RA 跟 A0卻是 AI-1 或者是 I 加 1 層的值這樣子你一執行就會錯掉所以這邊的機制就是在保障你 DI 層的 level

會具有 di 乘的 ra 跟 ad所以我們如果看它的執行的 sequence其實它就是從這邊先做一個 save 的 operation然後接著做判斷這邊就是我們剛剛提到的它就是如果它不是 return 它就會到這邊來執行就會來執行去 call 這個東西所以它就是到這邊一 call 別人它要 call 到這邊來所以它就是這樣子一直 call一直扣一直

扣一直扣扣到什麼時候呢扣到碰到了最底層最底層是誰呢最底層他就會在這一邊出現你最底層的就是這一行然後就一直就到這裡他就不會再跳到這裡了他就直接執行這一行所以最底層的時候就到這一邊來那這邊來就return那return到什麼地方去呢就是return到扣別人的那個扣的指令的下一行

就是在这个地方所以到这边要继续执行然后再return回去就是我们刚刚跟同学提到的这个sequence所以其实这一段code的观念就只是加了这一个跟这一个这两个所以同学如果说再看一段code它到底是要save哪一些register其实同学你只要确定说它到底扮演这个角色還是這個角色還是扮演

這兩個角色這個確定清楚以後你就會知道說到底哪一個要save哪一個不需要save這邊同學有沒有問題沒有問題 我們繼續往下看接著我們再跟同學提到一個很重要的觀念這個觀念跟我們在寫程式的時候我們常常寫程式的style每個人都有不同的style我們可以看到說你程式寫的時候你宣告變數的位置對我們這個到底在CPU裡面執行的時候到底對它有造成什麼樣的影響其實

CPU在運作的時候其實是有點不太一樣我們來看要看這樣子的一個觀念其實我們這邊最主要就是要告訴同學一件事情然後要問說為什麼它會有兩個Register我們這邊前面提到的SP叫Stack PointerStack Pointer其實指的就是指說我們一個procedure在執行的時候這個procedure會需要一些local的

一些memorylocal的variable所以我們要allocate一塊memory讓它去處理去儲存這些local的variable所以SP我們說它是由上往下、由上往下使用所以它就直到最上面另外還有一個叫frame pointer是什麼呢？ frame pointer 它這邊講說 procedure frame activation record其實它是指到我們某一個 procedure跟它相關的所有的變數，到底是存在什麼地方，所以可想而見，如果說這個procedure， 它是從這邊開始假設它是從這邊開始存跟它相關的這個值，

所以FP它是指到這個地方FP指到這裡SP它會怎麼樣它會一直變動對不對，因為你又加了一個值進來SP又往下又加了一個值進來SP又往下又加了一個值進來FP又往下，所以這FP它會一直update，但是這個frame pointer它不會動，它就是always指到你這個procedure的rec的第一個位置，最上面的位置，所以這兩個同學會覺得奇怪說為什麼要兩個，因為他們兩個基本上指的都是什麼呢？都是在描述某一塊memory，這塊memory是給某一個procedure使用，那你為什麼要兩個

我們這邊中間這個圖它就描述了我們這個 procedure 的一個過程，我們說這邊一剛開始進來這邊有 save argument register、save return address然後這邊就有一大堆save save register然後local array structure這些都是 local 的它就一直動整個 procedure 執行完之後它結束了它就回到這個地方回到這個地方其實sp跟fp它就只在同一個位置同一個位置那為什麼要兩個為什麼要兩個這個需不需要這個需不需要這看起來好像

會不會是多餘的這個看起來有必要對不對SP永遠就是指到我可以用的那個位置所以我要用就是SP這裡就是可以用這裡是第一個可以用的memory location就是直接拿來用FP呢FP它是指到最上面那個是fix

類似像這樣子就是你程式執行執行然後你所需要的memory一直會增加譬如說我們這種寫法你說integer a你的statement p1, p2就一大堆instruction所以你到這個地方就是說我們假設這邊有用所謂的block你有用block把它區分開來這邊這個是一個block的一個start這邊是另外一個 block 的start這邊是另外一個 block 的start我們說這個 a 它出現了它的 lifetime 出現了所以你就必須要 allocate

一個 location 給這個 a那你執行了到一段時間之後這個vc 出現了所以這個vc 它要 allocate 兩個 location一個給 b 一個給 c然後最後這邊是 10 個 element 給這個 array同學可以發現說我們假設有把它specify這是一個block這是一個block你這個block執行完的時候其實a它已經不見了它就是在這個block裡面那bc它也在另外一個block這個array是在另外一個block我們如果一開始我們把integerabcarray全 bộ都寫在一起等於說你這個function一開始的時候你就整個全部所有的這個variable

全部都allocate就一整塊memory給它所以這個是不同的寫法造成它的不同的這種效應在這個地方其實我們要探討的是什麼呢探討說為什麼要FP跟SP它的原因就在這個地方我們說我們假設這邊存了一個A然後接著又存了一個V所以當你在這個時候我們要去access A的時候我們知道怎麼樣它這個A就是SP加0對不對可是當你又存了一個V的時候SP是直到這裡當你要抓這個值的時候它是等於SP加多少 加4你不是加0 你是加4

也就是說在你的程式執行的過程當中你的SP會一直update你的SPupdate的時候你要去access同一個值的時候其實你這邊的offset就一直在變動這個對你而言會不會是困擾當然是困擾 這沒有問題這個你絕對可以 Maintain只是說我何必搞得這麼複雜，我還有一套機制在那邊。 Maintain說我要去找這個A，現在是0，然後等一下是4，等一下又是8，等一下

又是多少，等一下又回到4，在那邊變來變去。所以最好的方式是什麼呢？最好的方式就是我有一個FP，這個FP是fix，但是fix永遠只在我這個procedure的top location，所以我們這裡就知道說假設FP是在這個地方，我從FP值到A這個位置會不會變不會變，它不會變所以為什麼會需要FP跟SP的原因在這個地方

我不希望它在那邊換來換去。所以這個是這邊要提到的一個，在我們MAPS裡面看到的一個現象接著它這邊它跟同學提到的就是說，在32位眼，它的Memory的Location大概就是長這個樣子，最底層這邊是Reserve，然後這邊在上面的這裡到這裡的範圍是TextText其實就是存這個Program的Code接下來是Static Static Beta，就是你要存

這個Global的Variable類似像這一種的，它的這個Pointer叫GPGP，它不是只在最下面也不是只在最上面，GP它是只在大概在中間這個位置，因為它是只在中間，所以你要往上往下XS都可以，所以它這邊會有一個正負的一個offset，它的offset是正負正負的一個off set因為它是只在中間另外這邊有一大塊有一大塊我們

剛刚提到的我們就是說LKMemory給這個Procedure它的Local來使用這邊就是屬於這個StackStack我們剛刚提到它是它從上面開始往下用所以你SP都是由上往下遞減然後你要釋放一些記憶體就是把SP再往上加另外我們常常會用到的譬如說像Keep我們必須要做一些我們會去call一些MemoryAllocation這樣子的指令去跟系統去要一些Memory過來它是從這邊Static的最上面的這一部分就是這一塊的最下面由下面開始往上用所以Dynamic Data是由下往上Stack是由上往下當你兩個用到中間碰在一起的時候它就用完了所以基本上這邊就是它的使用的Memory的分佈圖大概就是類似像這個樣子

接着我们再来看后面这些大概是一些比较琐碎的一些关于MIPS的一些跟它指令有相关的首先我们看到这个CharacterData因为它等一下会有一些什么LoadBy或者是HalfWord之类的我们知道说我们现在最常用的或者是其实现在最常用应该已经不是这个AXI Code它是128個字元它是屬於這種Byte-Encode的CharacterSet這是早期就是說我們大概是用到這麼多就夠了還有95個Graphics33個Control大概就是這樣子所以它是一個Byte就可以表示所有的AXI Code這邊還有提到的Latin 1用到256個Character

然後還有我們現在比較常用的應該是這個unicode它是32 bit的character set所以是廣泛用在現在反正你只要用這種多國語言的話大概很多我們現在大家都通用這種unicode這邊還有提到的比如說UTF-8、UTF-16、UTF-it是Unicode Transformation Format這個同學自己看一下課本他的一些簡單的定義所以我們大概現在比較常碰到的就是這一種跟這一種其實我們看這個character其實我們就是要知道說我們並不是所有的時候

雖然大部分時候都是我們都是access、read write root有時候並不是以word為單元一樣我們為了要做這種bitwise的operation所以MIPS 它有所謂的 byte, load, storehalf word 的 load 跟 store這種通常都是在做 string 的 processing就是我們知道說 string比如說你一個 character 它就是一個 byte比如說這種 load byte它就是把這一個 base address再加上它的 offset 指到 memory 的某一個

location我們就是把這個location因為我們知道說一個location它指的地方實際上是一個byte你如果是要load一個word就是以那個location再加上它上面的三個搭配起來是四個總共是四個byte這樣才形成一個word你如果是load byte的話其實就是這個location指到的那個byte你就直接把它抓過來抓到這個RT這個RT我們知道說register它是32個

這邊一個byte所以它會做sine extension它會把這個sine bit複製其他的24個左邊24個bit全部都是用這個複製這邊它是load half word所以是16個byte所以它是這個location指到的位置那個byte再加它上面那個byte總共16個所以就抓過來如果說你不是要做sign extension的話你這邊就是load byte unsignedunsigned就是你全部都填領這個也是一樣這個是half wordload half word unsigned全部都填領所以這個是byte跟half word另外這個是store所以它這邊講說它是把這一個register

它是把它就是 store byte存到就是它最右邊的 byte把它存到這個 location把這個值 最右邊的 byte最右邊的 half word把它存到這個 location所以它有這些指令我想這個 string copy這個我們應該很快可以看過去因為這個 同學這個大一應該就都很熟了StringCopy 我們知道說它的StringEnd就是一個NualCharacter所以它是利用

這個做一個Copy把YCopy到X然後你如果碰到這個StringEnd它就結束所以我們說這邊它存的是X這個Array它是存在這個A0Y這個Array它是存在這個A1然後這個I它是存在這個S0所以我們看到這個課本裡面的範例MIPS的這個code它就很簡單就是說你code它因為它是使用這個

S0然後你這邊你就把S0把它save起來因為它是這個code所以你就把它save起來之後接著你就把這個I設為0把它reset成0那reset成0之後這個是A1是Y的base所以你Y的base再加上它的offset第一個是0所以這個是它的address你把這個address把它抓到內容抓到這個T2T2就是什麼呢 T2就是Y0所以接著我們就把這個Y0 save到S0接著就做這個判斷如果是NOR的話它就quit如果不是NOR的話它就繼續

繼續這邊x0是加1 加1之後再回到L1同學記得這邊我們之前array在index加1的時候都會加4對不對 我們前面的arrayindex加1的時候它都加4這邊為什麼加1呢這邊為什麼加1就一個byte所以它就加1你如果是一個Word你就要加4所以基本上就是這樣子的一個差別然後

這邊就是後面我們就不用看了所以這個是一個簡單的String Copy接著我們再來看就是如果我們前面看到的那些Constant我們有一些Immediate的一些這個Instruction或者是像這個Branch它會有一個這個Constant類似像那種constant基本上它都不是32個bit所以我們這邊講說大部分的constant都非常的小大

概16個bit大概就夠了但是如果說我們有時候要用到32個bit的constant那你如何把這32 bit的constant你把它set到某一個register你如何把某一個constant32 bit的constant把它set到這個絕對你絕對沒有辦法就是說我們就好像說把某一個constant直接32 bit的constant直接寫在instruction因為你inst ruction就32個bit你把32 bit constant全部寫在instruction那這個就不是instruction它本身就是一個data所以它這邊就要告訴我們如果把32 bit把它set到某一個register它提供的這個指令叫lui

這個I當然也是immediate所以這邊有接了一個16 bit的constantLUI它做了什麼動作呢它把這個16 bit的constantcopy到RTRT是32 bit所以它是copy到哪16個bit呢它這邊告訴我們說RT的左邊的16個bit右邊是6把它set回0所以同學看到說以這個例子Lui S0 61他把61這個16 bit constant把它savecopy到RT的左半的16 bit右半16 bit就設為0同學會說這61是我要的嗎當然不是我要的

當然不是我要的我要的值是什麼呢我要的值是這一個我要把RT設為這一個值所以在做這種事情通常你DesignerProgram的Designer你就必須要去拆解你的Value你要把你的Value用這種類似16進位的就把它寫出來你就知道說左半部的16個bit左半部的16bit是这个数字这个数字是多少呢是61所以你就要把61用

这个指令把它copy到R T的左半部、右半部你要的指右半部的指是這一個這個假設是2304好了你要的指是2304就這半部的指是2304所以你就是再做一個什麼呢OR再做一個OR你就把原本的這個S0在OR2304因為它原本右半部16bit被設為0所以這邊都是0那你再把這個2304跟它做OR那你做OR之後這一個數就會變成這一個數就是這樣子所以簡單的講我們就是可以這樣子來看我們Designer我們知道說我們要把

我們要把32 bit的數字我們假設是這樣子好了我要的32 bit number它就是00 001 這16 bit然後接著00 001 就是這樣子的32個bit number所以它的大小到底多少 同學自己算一下就是你把這個乘以它的power再加上e就是total它原本的值但是我們如果要把它move進來的話我們必須要怎麼做第一個是lui這個是多少沒有錯 這是e因為我們就看這一半部

單獨看它 它就是1接著在ORIS0也是1所以它就會把右半部這邊再設為1就是這樣所以這個就是有一點像在做苦工一樣在做苦工一樣你必須要先知道你的值你要設定32 bit值是多少然後把它拆解開來然後再一步一步先左邊然後再右邊就是這樣子來做設定這就是32 bit constant的設定方式是這樣子後面我們這邊要跟同學提到的，其實就是這個同學應該修過assembly

有一些觀念就是addressing的mode，首先我們這邊提到的是branch addressing，branch它其實就是類似像這一種，它的instruction format一個OP RS還有一個RT就是我們類似像我們這边看到的那就BEQ然後T0 T1，它最主要就是比較說T0 T1不一樣，如果說一樣的話，它就是跳到L1就L1，所以這邊的L1 同學已經知道說L1它不是說你就用AXI code把L1編碼編完之後把它寫在這個地方，他不懂得什麼是L1，他純粹是看這個值，這個值是代表什麼呢，是代表offset，基本上就代表我們從這邊就是說

你要往前跳還是往後跳要跳到什麼地方，這就是它的offset，所以從這裡面我們就可以知道 branch這個指令，它可以跳的範圍怎麼樣 很小對不對，因為它的offset就是用16 bit來表示而已，所以它能夠跳的範圍不大，這邊使用的這種叫PC relative address，我們下一次再跟同學介紹相對於branch另外我們知道說你只要擴大你的constant address的fear，它一定就可以跳得比較遠所以我們後面還有另外一種mode可以跳得更遠，我們今天上到這裡.