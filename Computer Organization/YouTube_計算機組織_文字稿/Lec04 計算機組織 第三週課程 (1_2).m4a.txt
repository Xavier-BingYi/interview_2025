undefined
我們上一次大概跟同學介紹了整個IC，它的製程的過程，然後還有我們看了一些簡單的RAIL的圖片。接下來我們要跟同學介紹的是IC的Cost這個IC的Cost其實它這邊看的是看Foundry它的平均我們現在看它這邊是平均每個代它的Cost大概是多少这种cost per die当然这种算法是一个很简单的一个观念

就是说我们说一个wafer它的cost到底是多少，台币或者是多少美金然后再除以说我们平均就是说一个wafer它大概包含多少个die但是这边要注意的就是说我们知道说我们一个wafer里面的die并不是每一个die都是good都不是good die，但有一些是bad die它可能是有良率的问题所以你这边必须要乘以年

乘以年之后就是你平均一个wafer出来之后你有多少个die是good die，它是可以deliver出去的这样子一除的话，就是你平均一个die它的cost大概是多少我们上次跟同学提到的像TSMC這樣子的一個Foundry它們的這個Cost最主要的成本其實就是在這個地方當然這個Manpower就是說它的人力成本當然也是其中的一

個，但是其实最主要大概就是在這边平均一个代大概有多少个Cost我們這邊就知道说它跟它相關的是什麼Cost per Wafer還有Year還有就是說你一個Wafer到底包含有几个带那这边到底哪一个是constant呢我们就继续再往下看我们说一个wafer到底有多少个带呢平均就是包含你的这个你

的wafer的area除以这个die area那这个当然是constant这个是constant因为就看你是这个8寸12寸看你是用哪一种wafer所以这个是它的constant那这个呢这其实不是constant因为我们说这个die area其实就是你这颗chip里面你把所有的功能全部塞到一个bonding box这个bonding box就是这个框框里面它的area

到底是多大所以就是die area这个die area很明显是跟我们的design跟我们design的技术是相关如果一个好的设计的技术的话它会把这个die area把它做得非常的小如果说设计比较没有那么好的话它的大area会比较大所以我们从这边就可以了解到说为什么我们会希望在设计这个layout的时候一

颗IC的layout我们都希望说把这个layout把它pack越小越好原因就在这个地方所以这个是其中一个接下来我们要来看这个year那year是什么呢同学要知道的就是说这个year的这个公式一般他們 就是說方水廠他們線上他們有一套就是說他們並不是有一個serum可以推導出翼兒是等於多少但是他們大概是透過這種Approximation然後估出來大概翼兒跟這個就是defect per area還有這個叫die area呈現一個是一個non-linear

的一个relationship这个nonlinear的话我们来看它是什么分之一呢分母是1加defect per area再乘以diary除以2这一个它的一个平方所以我们从这边我们可以看到的就是什么呢我们如果希望ier越大的话这边又出现了我希望我们的diary越小越好你diary越大的话你的ier就越小另外一个当然是我

们也是希望说你的良率如果说你的良率如果提高也就是说你defect per area越小的话那你的year一样会增加这个就牵涉到defect per area就牵涉到Foundry厂他们这整个技术它们整个生产线上面的稳定度反正就是它们方具厂在manufacture上面的能力它会让这个defect可以很高或者是很低所以这个决定了它的意义另外一个die area就是我们刚提到的它基本上是dependent design在设计上面的问题实际上

我们知道说在目前现阶段大家可以发现说，我们从以前的所谓的Deep Submicron，然后一直进展到现在的Neurometer就是奈米的Technology实际上，它很多的Effect我们要在设计跟制造的时候，要考虑到的效应是一代一代的一直不同，都有一些新的效應要考慮進来。從以前的我們，就是一般在設計的時候，我们都希望做所

謂的timing optimization—we希望讓這個IC它可以跑得越快越好—然後到後來就慢慢的就已經不是它的performance的問題，就牽涉到你在製造的過程裡面，你會用一些這個生殖外光然後去照然後去做曝光的動作。我们上一堂課把這段省略掉—it是利用這个照相正片負片的原理，看你做一個Mask光透過來的要留下來還是光沒有透過來的部分要留下來就留下一個Pattern這個就是我們要刻在上面的Geometry這個都是牽涉到光源光源因為我們的DimensionFutureSize越來越細，

所以就会有这一种干扰这种散射的这种现象它呈现出来的比如说，我们要刻一个方形结果曝光刻下来之后，它不是刻出一个方形那刻出什么呢—it刻出一个类似一个可能一个不规则的椭圆形就会变成类似这样子或者是说我原本要画一只狮子就画出来变成一只狗所以类似这种情况，那我们就希望说我们画出来是越逼真

越像狮子是越好类似这种效应的话呢那我们在就是需要在做design的时候就必须要最佳化那类似像这一种你如果没有做最佳化的话呢你的defect它在fungi生产的时候它defect良率它良率会降低它defect会增加所以这一类的optimization其实大概就是需要我們用一些演算法設計一些演算法然後去做一些optimization還有包含就是說

你要讓你的這個area越小越compact那也是必須需要一些optimization的algorithm所以這邊課本沒有提到的是這兩項其實它也是determined by我們前面提到的這一種CAT tool就是optimization的algorithm它做得越好的話這邊的結果就會更好所以我们可以知道就是说我们从这个year我们知道说这两个factor那从总共来讲的话我们就是说这边这个integrated circuit的cost我们就希望说量力越高然后这个per wave的这个dime number这边都是越多越好那实际上像

我記得以前好像有一間公司好像是接受美國還是哪一國的project support然後在台灣做地震的project然後就在台灣到處去引爆然後造成這種local的地震然後去研究這個地震結果有一天好像是在竹北那邊引爆大家以為是地震的確是他們是就是製造那種比較小的地震然後做一些實驗他們實

在是很沒有sense他們不知道說那個一震他那個Fungi場他那個時段的整個生產線上面的這個Wafer大概全部都要丟掉全部要報廢他不是說這一片Wafer裡面的哪幾個大概是good 哪幾個是bad他是整個生產線幾乎那些Wafer全部都要丟掉所以那个生产损失非常的可观所以Foundry厂怕就怕地震那一震就整个都乱掉所以这边课本有跟同学介绍到这种IC的cost所以前面这边是比较偏重于Hardware方面的一些Domain Knowledge后面我们就是再回到就是说我们来看说

我們一般在measure我們的CPU它的performance我們大概是用什麼樣的方法我們前面提到說最直接簡單而且精準的方法其實我們就是算它的round time我們就說你同樣的program在不同的裡面到底要跑多少時間那我們也知道說每個instruction它所需要的這種所需要的cycle的number也都不一樣那你不同的program你會用到不同的instruction

所以你的这个CPI也会不太一样所以我们在measure我们这整个CPU，它的performance的话，我们总是需要有一套比较科学的一个方式，有一个很知名的一个缩写叫SPECSPEC，它叫Standard Performance Evaluation Corporation。它发展了一系列的benchmark，for CPU IO， 还有Wave各式各样的一些operation可以来验证，说到底谁的效能会比较好。我们这边提到的这个就是SPAC，它所developed for CPU应该是在2006年那时候的CPU2006。它有包含integer floating point的operation，有不同的这种operation。通常我们在测量这种performance的时候，

我们大概不会是说用单一的一个program，因为我们前面知道说program它有不同的种类，所以它跑起来的话效果会不太一样。所以通常我们这种就是会需要一个不同的application，然后组成一组benchmark，组成一个benchmark的一个program，那这种我们就是称作一个叫workload。所以一个workload，它可能是由不同purpose application這個Program所組合而成的這

個SpecCPU2006，它就是測這種Elaps _ed Time但是因為我們這邊已經講說它是Dedicated for CPU所以它忽略了IO反正你是要是IO的部分它會把它忽略掉它是Focused在CPU 的Performance它測試的這個方法它會有一個所謂的Referenced Computer它把你要測的這個computer得出来的這個runtime把它 normalize normalize relative to reference machine所以它的算法它有一個叫 spec ratio它的算法其实就是你 runtime on reference computer除以runtime on measured computer所以你的這個spec ratio如果越大的话就是表示你的measure你要測量的那個computer它的performance是越好

你這個Spec Ratio因为我們分值是固定的它是Round Time on Reference Computer 那你分母它是Round Time on Majored Computer所以你的 Round Time 越小的话它的這個Spec Ratio 值就会越高所以就是用這種来做一個Normalization因为我们的這個World Log它是有不同的 Applic ation所以它测出来的Round Time有很多所以我们会从所有的这种Spec Ratio值去取的一個叫Ge

ometric Meme of Performance Ratio這邊指的Performance Ratio就是指我們前面提到的Spec Ratio這個值所以它這個Execution Time Ratio就是我們剛剛提到的Spec Ratio假設我們有10個Application我們就把這10個Application它得到的這個Spec Ratio值把它相乘相乘之後開根號取十字方這樣子我們就會得到一個值這個值就是我們所謂的geometric mean of performance ratio你要比較兩個不同的computer你就把兩個不同的computer它的這種geometric mean of performance ratio把它算出來

算出來之後就看看誰的比較大 誰的比較高這樣就知道說誰的performance值是比較好所以我們這邊提到它有這個integer的部分它也有14 point的部分那我们这个table其实就是我们刚的这个观念我们可以这边有个例子那这边就有一系列的per, vzip, gcc它有各式各样的这个application那这些application它这边列出来说它这个program所需要的instruction countcpi, cycle time那这个应该就是它的major computer

这个是它的reference computer的execution time所以我们就是说这个9777除以637就会得到这个spec ratio这个值那我们偷偷把这一边的这个spec ratio乘起来之后开根号然后这边就会得到这个11. 7这个值这个就是我们这一个major computer它的这个geometric meanof performance ratio那這邊有提到就是說其實這邊我們在後面

才會跟在第六章還是第七章才會跟同學提到Cache的miss rate跟hit rate它這邊有highlight出來的它特別有點出來說這幾個program它的miss rateCache的miss rate通常是比較高我們同學應該都知道說Cache它其實就是你不需要到memoryMemory去read data因為它的read timewrite time會比較久所以我們就直接在Cache裡

面去讀會比較快但是你如果Cache又miss你還要再到這個Memory它通常就會拉得比較長所以你的miss rate如果是越大的話就表示你要做越多的什麼做越多的Memory read的這個operation需要花的時間就會比較久前面是在算CPU的performance但是实际上同学应该现在买东西要越精我们都说这CP值到

底是多少我们通常不会说我们就是要买越贵的越好或者是买这个现在应该不会有人说我买扣的数目越多越好或者是说我买这个calculate越高越好我们当然会希望说不過現在同學住宿舍因為耗的電都是學校的你不用付所以你的電腦多熱都沒有關係反正那個電是吃公家的實際上就是說我們現在其實很注重的一件事情就是說我們耗掉的Power可以產生多少的Performance我們是很懇慎這件事情如果說

它的一个电脑它的这个performance非常的高但是它相对它耗的power也是非常的高当然不见得这个是不好我们必须要了解说它的每单位消耗每单位的这个power每单位消耗消耗每单位power到底能够产生多少的效能这个才是我们肯胜的那在这边课本跟同学介绍的就是用一个就是它的performance这边是用这个throughput

它是用每秒大概完成多少个business operation这个SSC underline OPS是bus INESS operation的一个缩写这个其实是源自于他们当初这个spec他们当初要定义一些这种效能的时候他们是从Java的一些教育开始那Java它有Virtual Machine它有一大堆的这种operation它们是定义说每秒可以完成多少个business operation这个power它就是说每秒要消耗多少joule所以这是基本的performance跟power的一个metric但是在这个地方我们并不是算说我们一个program它到底要花多少时间total要耗掉多少个

joule并不是在算这个我们这边我们这个spec power它的这边在算的呢它说这个overall business operation per second还有per watt它的值到底是多少呢其实它这边说SSJOPS/I的submission是什么呢这个I其实它就是说我们的这个wall locked一个server我們再看一個Server它到底是不是Green Computer Green Server我們會說我們希望把它的我們知道說它的Loading就是從0到100%我們把它分成10個等級所以0到10%的Loading然後11到20% Loading就是說你這Server的Loading到底是不是

已經全部Full LoadFull Load就100%完全沒有Load就是0这样我们把它分成10个等级所以你每一个等级它大概每秒可以完成多少个business的operation所以它这边就是这样子每一个等级的SSC OPS把它加总起来然后还有你每一个等级你在这个level里面比如说你在11到20的这个performance level里面它每秒

大概會耗掉多少個Power這樣子也把每一個Level的Power加總起來然後兩個相除這個就是我們這個SpecPower它在算這個Power它的一個Measurement我們算這個 我們來看一下我們來看一下說它算出來的值大概就是類似像這樣子的一個Matrix我們在這個Table裡面我們在這邊 我們並不打算跟同學就是

说这个matrix它到底它的重要性它显示了什么样的一个意涵我们这边肯证的是这一个说0 10 20 30这样子我们切出这样子这么多个11个level它的这个target loading的level有一个很重要的一个information在里面这个information我们可以看到说当你是0 loading的时候它的throughput是多少一定是0对不对它没有loading它没有loading当然是010%的时候它的loading是10%的时候它的throughput大概就是这样子然后它的power是180然后206 222 233 244

同学可以看到这个power是一直成长这个好像是可以理解为什么呢因为我们说你的loading越大的时候suppose是不是你的所耗掉的power是不是就应该要越多对不对应该是这个样子这是没有错可是同学从这个table里面有没有看到一个很奇怪的地方很奇怪的地方在哪里 是在这个power有没有同学要猜猜看说这里的power为什么

奇怪我们刚刚说这个loading越大所消耗的power值越多这个是可以理解的我们如果由上往下看然后loading越少越少power应该越来越少然后loading到0的时候power是141这里有没有什么奇怪的地方有没有同学要猜一下同学答对了我们的观点不是说当然是动能全开的时候它的power会吃很多power这可以理解然后越来越少 loading越来越少少到都没有loading的时候

它为什么还吃141呢那你141跟295不也就是差不多一半而已可是它的loading是从100%降到0怎么差这么多呢对不对这里不是应该要0吗是不是这个tipo当然不是 tipo这个就是141没有错但是这个是一个很奇怪的事情，然后这个表也是告诉我们一件很重要的一件事情，就是说当你loading是0的时候，你这个power可不可以再往下降，有没有办法再往下降，那为什么这里会有141呢这里为什么会有141那个算了不过就是说这个跟人一样

好像說同學現在有在聽，所以你聽的器官它會消耗掉一些力量我們如果說我把耳朵塞起來，我也不要吻 我也不要講話什麼都沒有就坐在那一邊 坐著不動肚子會不會餓當然會餓 對不對，因為你必須要維持你的基本生理的功能，你要耗掉那些Power，那你基本生理的功能就是你的心脏你要在那边Pump Pump然后把血液Pump到全身，所以你维持你生理基本的功能那个就是你所需要最基本你要用掉最少的Power就是那些那Circuit是不是

也是这个样子呢当然是那，但是是不是这141是一定就是需要最少就是141呢那当然就是要看你Design的这个功力，所以为什么也就是说同学会发现说在power issue还没有被大家重视其实不是重视而是说这个还不是一个很严重issue的时候那个时候反正大家一个chip里面大概就是一个single mode什么single mode呢它就是，只有單一工作電壓，一颗鏡片裡面，它大概就是有一種工作電壓，但是學生現在看一些那种高效能還有你要

就是要考慮到降低Power的這種chip，它絕對不會是只有一個工作電壓它一定是一個Multiple的一個Voltage它是一種多重的工作電壓那它為什麼需要多重的工作電壓呢它就是要區分說這個不同在同一個時間裡面呢EKIC裡面，它的Component不會是全部都是處於同樣BZ的狀態一定是有人很忙然後有人普通忙

有人不是很忙然後有人在那邊發呆就是這樣子你不同的State你就是必須要讓它消耗掉不同的這種Power或者是乾脆把它Turn Off掉就把它關掉當它需要開始動的時候再把它Wake Up再把它叫起來就是這樣所以這邊有一點就是在這個地方是告訴我們說这个是一个你可以minimize power的一个点所以到

这边我们在第一章一些基本的这个课本要交代的观念还有我加了很多觉得说对同学有帮助的一些domain knowledge当然大部分都是focus在这个hardware部分因为我知道同学接触的以前接触大部分都是software那一些hardware的一些domain knowledge知道的比较少后面我们让同学看到就是这边有提到几个 phoracy跟PIV4这本课本，它

在每一个章节后面都会有一些讨论都是透过这种phoracy跟PIV4来介绍一些重要的观念，这也是很重要的观念我们来看一下第一个phoracy它说有什么谬论呢有人说这个computer在这么长久的时间以来几十年来其实它都是用同样的一种方法，一种架构把它建构出来有人用同样的东西用这么久的吗我们知道现在的人都追求时尚当然不是有一些人比较喜欢时尚的，他东西一直换一直换

所以说用东西用这么久你都没换当然是落伍的用这种方法来做computation，是不是需要被淘汰掉这个当然是到目前为止应该还没有找到比这个还要更好的有比这个还要更好的目前都还躺在实验室里面还没有commercialize就是需要它成熟了可以production之后才能够取代目前我目前这种computation的style接下来他有一个例子他在跟我们讲说当我们在做一件事情

的时候前面这堂课一开始就跟同学提到你必须要了解趋势不管你是做什么事情你要先了解趋势因为你了解了趋势跟潮流的趋势之后你做的判断才会比较精准做的计划才会有意义如果你不了解这些你做了一大堆计划做了一些判断那个都是没有意义的这边就举了一个例子这个例子它就告诉我们说有一个人他可能是开了一家新的公司这新的公司希望打倒目前所有的市面上所有的电脑他说我要做比目前所有的电脑

都还要快三倍3 fold快三倍三倍多不多非常多快一倍就非常多他说我要快三倍那显而易见的你这种电脑一推出来之后这家公司一定是也是top它的销售一定是猖狂但是他也不知道说现在人家电脑的演變到底有多快他就說三倍那我們就三年好了我們就用三年的時間做出三倍快的

這個電腦結果他們就公司就閉關三年之後推出這個三倍快的電腦結果推出去之後就發現說糟糕還要再閉關了因為現在市面上的電腦都比它還要快那為什麼會比它還要快呢因為我們前面提到了提到什麼呢More slow我們說More slow他告诉我们说一般现在大概电脑的performance大概他说每年大概会有50%的improvement每年有50%的improvement你三年的话这个是1.

5三倍是3. 375只有他三倍快推出来当然是比别人慢只好赶快再闭关三年所以这个就告诉我们说你要先知道说这种成长的趋势到底是怎么在走你才能够做一个well-planned。这边有列出来同学可以看一下这几个几十年来比较知名的CPU另外还有一个非常重要的一个Low叫Endless Low。这个Endless Low在以前我记得好像早期的课本好像Endless Low好像是放在

放在前面如果我沒記錯就放在前面後來把它放到第一章的Pit 4。 Pit 4Pit 4它其实是要告訴我们一件事情，它是透過這個ridiculous的一個example來告訴我們一個很重要的一个law叫Endos Law。它告訴我们说有一个人就一个菜鸟工程师他刚进公司然後那个老闆就跟他讲说我们现在有一个我们现在的

computer有一个program，它要跑100秒这个program里面它的乘法占了80秒也就是说这个program其他的operation都不管这个program里面的乘法，它需要花80秒的时间才能够完成其他20秒的时间就其他乘法以外的所有的operation它就说可不可以请你说你的硕士论文是做乘法是研究乘法那你可不可以把这个乘法的performance把它improveimprove之后会怎么样呢就会使得说我们的这个program在你的新的computer上面，它的性能可以improve五倍。五倍是什么意思呢就是你的program原本是100秒

你现在要幾秒就要把它跑完20秒 对不对你就20秒就要跑所以你的Performance要improve五倍那這個菜鸟工程師他就想說這個是就是發揮他的專長的時候他就一口答應說沒問題我可以把這個懲罰器把它加快讓我們的這個Performance improve五倍結果他在那邊做做做做到最後怎麼做 做不到五倍最后只好被fire掉他为什么没有办法improve五倍呢因为他不知道

什么叫M-Dose Law他如果知道什么叫M-Dose Law的话他算一算他就会很聰明地告诉他老板说你好像没有学过这个东西这个五倍是不可能那为什么不可能呢我们来看一下M-Dose Law他告诉我们什么呢他告诉我们说我们要知道说我们做了一个improvement这个improvement它所需要的runtime要怎么算我们首先要把一个系统

你improve会被improve所影响的部分把它抓出来然后还要抓出来之后剩下的就是什么就是你improve不会影响到它的runtime的那一部分也把它抓出来所以你这一部分不会被影響的runtime它是不變的但是我improve的部分有做修改的部分做修改的部分这部分它会被影響所以就是没有影響的部分它是不变那会

被影響的部分它会改变然后這两个相加就是我的新的系统它的round time所需要的时间就是这样子所以我們說它會被變的原本的round time是多少然后除以它的improvement factor你可以增進幾倍比如說它原本是10秒你可以增進5倍所以10除以5它就會變2秒就是這樣子所以就我們這個問題來看它原始這個老闆他跟他講說你這個100秒要變成20秒因為你要5倍你要5倍的improvement那我們說這個multiplication

乘法是占了80秒所以你原本非乘法的部分就20秒所以你20秒要獨立出來然後把乘法80秒再除以看你增進了幾倍你這樣一加兩個一加要等於多少要等於20秒 這是你的target所以你的N要等於多少Infinity你的N是Infinity所以這當然是Mission Impossible同学不要以为说不会有这种老板我以前就干过这种事就我毕业的时候呢毕业退伍到公司去上班然后刚进去的时候

虽然这是公开课程所以没有关系这个老板就说你就负责这个tour你就一年的时间commercial product已經有了我們就是說我們要以這個commercial product我們當然希望做得比它好那你就花一年的時間我們把這個commercial product它所有的option所有的future全部都做進來我那時候說好啊 可以啊 沒問題啊這問題聽起來好像不會很難然後就開始做做了幾個月之後把那個現有的commercial product，他們的menu讀完以後就開始心裡發毛，

因為已經做了， 忘了不太記得大概兩三個月、 三四個月已經做了兩三個月、 三四個月奇怪怎麼做了這麼久才做好了一兩個option，而且那個option好像還不是那麼的簡單。後來做到一半就趕快去跟老闆講說我發現這個一年絕對做不完，我後來才知道說他們當初那個tool不知道用了幾個PhD花了幾年時間才做完，

然后之后又开始在那边refine refine refinerefine那个就是polish它的performance，然后debug它的bug搞了好久那个tool才出来，他们当初叫我一年就要把它做了不过那个老板也不错。后来就说我发现这根本做不完，我就说我们是不是应该找一个subset什么subset呢，就是目前市面上用最多的那个option，我们就去implement这些option我們就可以讓市面上所有大部分的user他都可以用

這樣就好了，他也覺得說， 他也同意說這樣子是可行的方法。后來我們就找出了叫Sales去審問说到底用户最常用的option是哪一些，然后就专门去做那些最常用的option最後大概就可以做完了，所以同學不要以為說不會有這種事情接著這個Fallacy它就告訴我們說這個Fallacy就是我們剛剛跟同學提到的所以我們在idle time或者是你的zero loading的時候

你的power是什麼你的power是zero或者是非常非常的小是這樣實際上並不是這樣子我們可以看到就是說在10%的loading的時候它還是差不多是180所以它的loading并没有降到相对的非常的低你可以说295180其实已经很低了事实上并没有那么的低你如果说是个位数或者是120那还很低那为什

么会需要这个样子呢因为他举了一个例子他说Google的Data Center他说大部分它的loading是10%到50%这样子的一个loading它server的operation大部分是在这个范围之内它并不是说大部分都是在90% 100%的loading所以你说大概是只有少于1%的时间它是在100%的loading的state所以同学就可以想见说我们在非常少的loading的时候要用掉非常少的power的这种design是很重要的一件事情

另外我们再来谈到就是我们在前面有跟同学介绍到什么呢就讲到这个RISC跟SISC在早期的年代有RISC跟SISC的战争然后他们有在宣传说谁比较好谁比较好那时候我跟同学提到说其实各家都有各家的matrix其中一个很有名的matrix叫MIPSMIPS它是什么缩写呢MIPS它是一个Minutes of Instruction Per Second就是

你每秒可以执行几百万个指令你每秒可以执行几百万个指令我们根据前面的说明其实同学看到这一个缩写同学大家就知道说其实这个好像有陷阱什么陷阱呢它只告诉我们说你每秒可以执行几百万个指令但是它并没有告诉你说你执行的这几百万个指令是哪一种种类的指令这

个就是它的陷阱所在所以科想来见同学可以猜得出来说是哪一个阵营最喜欢用这个matrix来说我们的多少个mips另外一个A的是10mipsB的是8mips所以我们A是比较好哪一个阵营会比较喜欢用mipsRisk 对不对大家都知道Risk它会比较喜欢用这一个因为一比较的话它一定是比较好所以我们这边就可

以来看说为什么MIPS它的定义其实就是就是你执行掉几个instruction count把它除以你的execution time再乘以死的六次方因为它这边本身就是几百万个minion所以你说6MIPS就是600万个每秒之行600萬個指令所以它是這樣子它的definition是這個樣子那我們把execution time我們把它用這個式子來替換這個式子我們把它簡化之後我們就會變成CPI乘以10的6次方分之clock rate乘以這個clock rate。所以其實它跟你的CPI是有關係的，跟你的CPI有關係

就是你平均每个instruction会需要几个clock cycle我們說这个在risk的machine里面通常它的CPI值它會比较高。另外，你執行不同的program因为你不同的program你会用到不同的instruction所以它的CPI它也會变化。所以，这个就是一个陷阱。所以到这里，我们第一章大概就跟同學大概就介紹完了，因为多介紹了一些Domain Knowledge所以多花了

一些時間，所以第一章它的Concluding Remarks大概就是我們前面提到的一些重點Cost Performance平均就是它一直在improve因為我們的Hardware的Technology一直在進步這邊第一章我們有跟同學提到什麼是abstraction它就是一種design hierarchy還有就是instruction set architecture它是Howard software的interface還有best performance的一个major其實就是用execution时间還有一個重點就是power就是power，就是說為什麼我們沒有辦法一直在design我們更高的工作頻率的CPU最主要當然就是因為power的關係，

所以我們必須去用這個parallelism去improve我們的這個performance。最後兩張我們這邊讓同學看的就是我們的source是從這边來的，就是這個作者他在這个裡面的透明片裡面提到，就是說computer architecture的一個future trend。其實就是我們都知道的，就是這個Marty code，甚至進展到所谓的manicode我們这边的manicode大概就不是指目前的GPU这种manicode以

后當然是所谓的一直整合这样子的一种趋势我們这边可以看到的就是說我们提到的Moslow Moslow，它其实它已经有一點點，但没有说真正它有成長，但是它的成長并没有带来就是一个正比的一种performance的一个成长的关系。我们可以来看Pentium 3跟Pentium 4，它是1GHz 1. 4GHz，同学如果回去查一下你的电脑销售的历史可以看看當时Pentium 3 Pentium 4它们的价差大概是多少，大概是在2000年的时候，那时候是用0.

18这种是Deep Submicron的制程0. 18的这个制程同学可以看到它是从28个minion transistor进展到42个minion的transistor如果我们是用spec int 2000它的这一种这个应该是geometric min它的这种performance metric来看的话它是343到393这两个performance有没有增长的很多呢很明显是没有它只有接近15%的improvement可是它的transistant count它的确是50%的increase它的transistant count是50%的increase但是它的performance却没有达到相对的功能它的energy到近代我们可以来看一下energy每一个network transfer

Network Transfer它大概用掉三个Picot Joule然后Off-chip的一个Memory Read什么是Off-chipOff-chip Memory Read就是你是跨过跨过一个chip跨过CPU到CPU外面Off-chip到外面去做一个Memory的一个Read500个Picot Joule那你如果是一个Cache这个Cache是32KB Cache Read它是比较不好power 50个joule那

你LU8做一个加法它用掉两个piglejoule所以你可以发现什么最好power这一个对不对这个是我们目前碰到的一个问题那在我们旧年代大家会认知的是什么呢power那个power是不用钱的然后transistor呢Consistor很贵所以如果说你的这个chip里面功能越多那你的chip一定它的price一定是非常的

贵所以Consistor是很贵的你的乘法在当时你做一个乘法它是很慢然后你做一个memory的access它是很快到目前power is expensivepower是很贵Consistor几乎是不用钱做一个乘法它的速度是很快你的memory的access是非常的慢非常的慢所以它的趋势一直在变其实这个改变它影响的范围非常的广我们今天就不跟同学在做这方面的介绍介绍下去要花很多时间

在这一方面的演变其实它牵涉到你整个design methodology还有你的architecture还有你的computation它的一种架构的演变到底会是什么样的一个情况跟这个都是有关系的所以其实我们看到一个我们已经知道的就是也跟同学提到过的这个是一个slot code這個是IBM做出來他們的一個PREFORM他們

的架構大概是這樣子這個INTEL我們有跟同學提到過INTEL講說在一個chip裡面超過100個Code的年代很快就會到來所以同學準備迎接這樣子的一個Moddy Code的年代這個其實同學可以看到最近的產業的變化。这个变化其实就是说同学可以发现以前我们叫Wintel大家都知道Wintel就是微软跟Intel它们的这种

软体跟硬体的结合。你会发现说Intel它拼命的塞transistor那chip就非常快可是你会发现说有一家公司更厉害就是Microsoft你不管再多快的晶片出来它都有办法让你觉得说这个电脑好像没有很快，这就是Wintel它的演变就是用这样子的一直在变。其实你会发现说其实有新的这种趋势，就是说ARM像MIPS ARM这样

子的这个公司，同学你有发现说微软它已经宣布说它的Win8会support ARM，对不对然后Intel它跟谁结盟呢，它跟Google Intel不是要做Search，它不是要做Search Engine Google的Enjoy，所以Intel跟Google結盟，你會發現說大家都好像大家戀愛的對象都不一樣了為什麼會這樣子呢，因為ARM它以前它是RISC的這種陣營的代表，ARM其實它以前都是在嵌入式

可是現在什麼東西越來越受重視呢早期的嵌入式就很注重Power不能太高所以ARM它一向都是Low Power所以你Power的issue越來越重要的時候那ARM它的重要性就越來越高所以ARM其實它是一直從嵌入式然後吃到手持式的裝置其實它現在的目標是什麼呢就是Laptop我相信它的目標絕對不是只有Laptop Laptop

之後大概就是Green Computing的Server Intel它以前就是在Server然後PC Desktop Laptop但是因為它Sysc就是耗Power Sysc就是耗Power所以它是一直往下做它希望再進入到這種手持式的裝置可是Intel它有它先天上的Architecture的缺陷它就是Sysc的架構它的架構非常的複雜所以Intel它們的手段是什麼呢 Intel它的長項就是它的製程同學不要以為Intel就是Design設計的技術非常厲害實際上Intel它除了設計的技術厲害之外它的製程技術非常非常的先進所以它利用製程的

方面的技術它有辦法把這個砲降它不是降百分之幾它可以降一倍 兩倍 三倍這樣子大量的把砲降下來所以這場混戰已經開始了最後會怎麼樣其實現在還不知道我們今天就上到這裡.