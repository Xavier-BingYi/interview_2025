undefined
我們上一次跟大家介紹到這個POPLinePOPLine雖然看起來，它的speed up相對的可以提高很多。你有幾個stage你可以有多少倍的speed up，但是我們知道說，那是理想的情況。一般我們沒有辦法得到那麼大的一個speed up。最主要的問題是在於它的這個hazard什麼是hazard呢，它的hazard基本上就是說，可能是因為instruction的execution，又可能是resource的一個競爭。它又可能是，因為就是說，它要讀取的資料前面的指令還沒有算出來，有各種各式各樣的原因，使得它的指令，

它沒有辦法，就是one by one一個clock就送一個指令到這個CPU裡面去這種情況，我們就是稱作這個hazard。所以，這種hazard基本上就是我們這邊提到的，它就是一些situation這個situation，它會讓我們每個一個clock就要submit一個instruction進到這個CPU裡面去執行這樣子的一個目標，没有辦法來完成這個，就是所謂的Hazard。一般的Hazard有所謂的Structure Hazard還有Data Hazard還有Control Hazard。 Structure Hazard就是我們剛剛提到的，就是要競爭這個Resource。舉例來講假設說它兩個指令就是說

在Time i跟這個Time i加1兩個指令它如果說在同一個時間點它都會需要用到同一個functional unit比如說是 ALU 或者是 memory不管是哪一種它如果要使用相同的functional unit因為一個functional unit同一個時間只能夠背一個 instruction 來使用所以就表示說因為這樣子的限制使得它兩個指令只能夠執行一個指令這樣子的情

況我們後面進來的instruction基本上它就不應該在它原本的時間點進到CPU裡面來因為它在那個時間點進到CPU裡面來它會跟另外一個指令同時去進這一個resource這個是不被允許的所以我們必須要事先能夠知道這樣子的一個情況發生所以我們就不能夠讓那個指令在那個時間點進來那怎麼辦呢那就必須要延後就延後一個clock延後一個clock如果不行的話就延後兩個clock延後兩個clock也不行你就延後三個clock所以就是用這樣子

的一個方式所以我們就知道說有這樣子的一個structural hazard它就沒有辦法說每一個clock cycle就完成一個指令因為它在某一個時間點就中斷了它要隔兩個 隔三個clock下一個指令才能進來這種就是所謂的structure hazard因為functional unit resource在競爭第二個data hazard就是說我們後面的指令它的input實際上是前面指令的output所以後面的指令它要去讀前面指令的output

結果它要讀的時候前面那個指令它還沒有算出來這種就是所謂的Data Hazard既然前面的指令還沒有算出來你後面的指令你就不能夠送到CPU裡面你一樣要再延後一個Clock或者是延後兩個Clock所以這種就是所謂的Data Hazard我們等一下就會來看說為什麼會有這個data hazard其實就發生在比如說在load就是前面如果有一個指令它是load它可能就會有這種data hazard的情況第三種是大家最能夠了解的就是所謂的control hazard控制 hazard是什麼

呢我們剛剛提到的所謂這個hazard就是說一些situation它沒有辦法讓你能夠很順利的每隔一個clock cycle都送一個指令送到CPU裡面去最容易理解的就是這個控制因為我們一般的sequential execution你就是one by one就是PC加4、PC加4、PC加4所以你就是每隔一個clock cycle就送一個、送一個、送一個都沒問題可是當你碰到一個BEQ的時候，BEQ你到底是要跳還是不要跳

這個你必須要在VEQ的指令執行到一個段落之後，它才能夠決定說它的comparison的結果到底是相等還是不相等所以這種Ctrl有關於這種Ctrl的問題我們就沒有辦法保證一定是百分之百它每一個clock cycle都可以審密一個新的指令進去這一種就是我們後面會看到的就是因為這種Branch的問題所造成的

這個hazard首先我們來看這個structure hazard這邊就是structure hazard就是我們剛剛的描述它是conflict for use of a resource就是兩個指令都要去搶同一個resource譬如說我們如果說在這個MIPS的這個part line我們假設原本就是只有一個memory我們只有一個single memory一個one memory unit如果是one memory unit的話我們知道說我們的load跟store它必須要去memory做

data access做data access說你是load跟store沒有關係它是load它就是去抓資料store它就是去write一個data只要它們不要去就是剛好是overl ap同一個class cycle就沒有問題，另外這個instruction fetch我們知道說它都要去讀就是我們知道說每一個指令的執行cycle的第一個階段就是去fetch instruction這個fetch instruction它其實就是到memory裡面去讀資料，我們假設只有一個memorybeta instruction都是在這個memory所以這個就有很大的機會，我們下一個指令在fetch的時候我們前一個指令load store正在在那邊做read或者是做write

這個就是所謂的conflict，它同樣都是一個要對同一個resource去做一個access這個就會有conflict，如果conflict的話我們就必須要延遲，要延遲後進來的指令讓它晚一點進來，通常我們這種延遲就是delay，我們就是稱作bubbleinsertion，其實同學等一下後面看就會知道它為什麼叫bubble，因為它就是畫一個bubble所以就是因為這個原因，所以我們的publine database它必須要separate instruction memory還有data memory，實它就是不能夠只有一個memory unit，它必須要兩個，一個是for instruction一個是for data這樣子我們在instruction fetch才不會跟

read跟write的data它有一個conflict的問題第二個就是data hazard這邊有一張圖我們可以來看一下這個例子就是我們這邊做了一個加就是加t0加t1存到s0第二個是s0減t3存到t2我们来分析前后的两个指令很明显我们说后面的指令它的第一个input operand是什么呢是前一个指令的output我们就要来看说当它要读的时候第一个指令 output是不是已经ready了呢我们就来看首先我们把我们这边等一下后面会看到说

基本上我們在分析pup line我們有所謂的這種single cycle data diagram我們有所謂的multi cycle的data diagram類似像這一種是比較是屬於所謂的multi cycle的data diagram同時可以看到很多的instruction它在pup line裡面的情況基本上它就是把time frame把它展開來所以同時可以看到每一個instruction都有五個stageinstructionFetch, instructionDecode, execution, memoryAccess, WriteBack就這五個Stage這個是AidAid我們可以看到說這邊再先說明一下就是說這個就是一個Unit,一個resource我們在這邊有shadow是在右半部

它這邊表示說它的read是發生在右半的clock cycle我們知道一整個clock cycle你可以有它的前半段跟後半段你可以把它分成兩個部分所以它真正在做read的時間它是在後半段的時候做read這個decodinginstruction decoding再加上register的一个read跟write这边其实进来以后如果是做decode实际上它是它一进来就开始做了它不是在后半段在做我们这边后半段是指register的read跟writeregister的read是在后半段做readclack cycle的

後半的clock cycle做read這個execution unit它是整個clock cycle都在做運算所以這張圖告訴我們的是它整個clock cycle都在做運算Aid因為這個memory它不需要寫資料到memory所以這边都是空白的表示它沒有operationWriteback其實就是把T0加T1算出來的值寫到register這個register其實這個register就是這邊的register都是同樣的register file它這邊是在前半段把它寫進去這边是後半個clock cycle讀出來這是在前半個clock cycle把它寫進去可以這樣子做當然也是有一個原因就是說

我們在做register的read跟write它所需要的delay沒有clock cycle這麼長大概最多只有clock cycle的一半所以你可以把它分配到Read是在後半個clock cycle完成然後Write是在前半個clock cycle來進行我們可以這樣把它分成兩邊同學可以看就是假如我們這個減是在這個地方

InstructionFetchDecodeExecutionMemory這個是檢如果我們指令是一樣是下一個clock cycle就進来同學可以看說它發生了什麼事情我們可以看到說當它在做ID的時候這個檢法這個指令它要去讀這個S0它在什麼地方讀呢它是在這一邊讀的 對不對它在這一邊讀 對不对Read從register讀資料出來是在第二個每一個指令都是在第二個階段第二個stage它做decoding它也同時做register的read就是這樣子所以它在這邊做read同學可以發現說這個時候S0在什麼地方呢

t0加t1在哪裡在這個時間點t0加t1在哪裡t0加t1還沒有生出來，它還在第一個指令它還在加緊感工還在那邊做加，它還沒有加出來，它是在這個時間點結束之後，它才加完，它在這個time frame結束的時候，它才加出來了。所以這個指令可不可以在下一個譬如說，這個如果是i，它可不可以在i加

1馬上急急忙忙地趕快丟進去，嗎？不可不可以， 不行丟進去的話，這個popline執行就錯掉了，它可以去S0這邊讀，但是它讀出來的指不知道是什麼東西，它讀出來的指不知道是什麼反正就是原本就存在S0裡面的某一個指所以它實際上真正ready是在什麼地方呢，在這裡，它真正寫進去的時候，是在write back的時候寫進去，write back，就在這個time frame的前半個clock cycle寫進去的，所以這邊就告訴我們說真正subtraction應該submit的時間點，是在這個地方，因為第一個

是 instruction fetch第二個 instruction decoding再加上 read register因為它是在後半個 class cycle read它在前半個 class cycle write所以剛剛好，這個沒有問題，它在前半個 class cycle寫到 register file後半個 class cycle它就讀出來了，所以這邊讀出來它會讀到對的這個S0就是T0加T1所以最快最快的時間點是在這個時間點最快最快的時間點在這個地方所以最快的時間點S0 ready的最快時間點在這裡所以你最快只能夠在這個time把它submit進來所以這個就是我們

這邊提到的subtraction必須要在這個時間點把它丟進來所以我們可以看到說既然它必須要在這裡丟進來那這邊叫什麼呢這邊叫no operation這個也是no operation這個才是subtraction所以我中間會有兩個cut cycle是idle idle的意思不是說整個CPU都不做事而是說我中間有兩個clock cycle我都不會丟指令進去我也不會丟指令所

以它就在等它就在等這個所以我們從這樣子的分析我們就可以知道說一個簡單的一個加跟減當然它也可以是加配加所以它就是因為它後面的那一個rtype的指令它的input是前面指令的output所以它就必須要delay兩個cycle然後才能夠submit才能夠issue這個新的instruction這個觀念很重要同學這邊有沒有問題因為後面大概差不多就都是在講這些觀念同學有沒有這一張圖看得不是很懂的

沒有 因為這邊了解的話後面就很容易了接下來我們就來看說是不是所有像我們剛剛提到的這種Data Hazard加然後後面還是一個Rtype後面的指令，它的input是前面前一個指令的output，這種Data Hazard它就一定要idle兩個clock cycle，是否一定要發生這種事情呢？它告訴我們說不用， 我們可以用一個技術叫Forwarding或者是

叫Bypassing，Forwarding或者是Bypassing都是同樣的意思這個技術，它其實就是只有一個觀念，它的觀念說我們前面之所以需要等兩個clock cycle，它的原因在哪裡呢？因為我們是等它把這個datapath算出來的結果寫到register file，我們再把它從register file裡面再把它讀出來，我們是中規中矩等它寫進去然後再讀出來，因為它這邊memory這邊是沒有用，所以它等於浪費了這段時間，實際上我們如果不要等它把它寫到register

再拿出來用，我們可以就很急的說它這邊 execution 算出來了，我們就直接把它拉下來用，完全不等它寫回 register然後再從 register 讀出來，我們就省略掉 write 跟 read 的一個動作，這個就是叫forwarding所以同學可以看我們如果subtraction我們是在這一邊也是一樣，就是下一個clock cycle的subtracting就把它issue就把它丢到CPU裡面，那我們可以發現說其實它根本就不用做register read的這個動作為什麼呢，因為同學可以看到說它的LU的first input，我們就直接從它的output直接拉一條線拉過來，剛刚好，

它就是在比如说这个第一个clock算完就直接把结果拉到feedback回到它的input然后就是下一个clock它就可以开始做就直接马上线拉过来就直接做同学先不用管说这个到底是什么实现我们同学在这里只要了解说它的concept到底是不是legal還是illegal它的觀念到底是對的還是錯的這個实现的問題我們後面就會看到這邊我們先管說這樣子

的觀念到底合不合理這邊有沒有同學沒辦法接受的說這樣子不合理因為有同學如果覺得不合理的話我們要想辦法說服大家讓大家認同說這個是合理的，因為後面也是很多都是跟這個Forwarding跟Bypass都在講同樣的東西，所以我們前面一頁跟這一頁兩個觀念很重要有沒有同學覺得這樣子是不合理沒有辦法接受的這邊的Forward是指這一個過來，這邊Forward對不对，那Forward難道一定只能夠從Execution Unit這邊來Forward嗎

當然不一定，它可以從其他的地方來做這個 forward，這個是可以的它可以從這邊做 forward只是說你的 forward 的機制就會變得比較複雜因為你的 source 有兩個你的 source 有可能是從 execution stage 過來也有可能是從 memory stage 過來它會變得比較但是這些都是很容易處理的因為畢竟你可以省掉Bubble那個就是一個很大的Game這

邊同學還有沒有問題我們再往下看另外一個Data Hazard我們剛剛兩個都是R-Type我們來看Load-load-use我們可以來看說它沒有辦法避免這個bubble就是所謂的這個store或者是所謂的這個store你透過forwarding它還是沒有辦法就是說避免你要去delay你的一個instruction的issue因為為什麼呢因為我們可以看到說之前的R-Type它的data它

的output是在这个stage就ready了可是我们的load我们的load我们这个execution stage它是在算memory的address它是算memory的address所以你这边execution stage的output你不能用你没办法用它是用來這邊當一個address然後告訴它你要到memory的什麼地方去讀一筆資料出来所以我們的load它的output實際上是在這個stage結束的時候它才出現所以我們想要在這個地方把這個subtraction要透過一個forwarding的機制就把它避掉這個bubble這個是沒有辦法所以這個是一定要insert一個bubble所以這個其實你在

你在最後 output 端那一邊觀察其實就是有一個 clock cycle沒有 output它沒有 output 產生它沒有 output 產生就是因為有人丟了一個 bubble 進來有人丟了兩個 bubble你就會連續兩個 clock cycle發現說沒有 output因為都沒有人丟 bubble 逛來所以沒有 instruction 被執行完所以在這個地方我們最快的就是我們剛剛從Memory這邊直接Forward透過Forward直接拉過來它就可以避掉說你要兩個三個這樣子

的一個情況所以同學要知道說Load use的Data Hazard一定要有Bubble它就是一個如果不是用Forward你沒有Forward不只一個同學可以回去畫畫看要幾個實際上我們要minimize這種bubble然後提高它的throughput put我們可以用其他的方式這邊就是所謂的co-scheduling這個co-scheduling就是說我們的instruction把它做一個scan我們了解說有一些指令它其實並沒有data dependency所謂的data dependency

就是說我這個指令是出現在後面但是它跟它前面的某一些指令都沒有使用同樣的 variable或者是說它前面的 instruction 的 output我這個指令並沒有需要拿來當 input所以沒有這樣子的 data dependency它如果發現沒有這種 data dependency實際上它的 instruction這個sequence是可以reordering它的sequence它不一定是要123456它可以123645它可以把第六個指令往前搬只要這個第六個跟第四個跟第五個它們之間沒有data dependency你就可以

把instruction6搬到4的前面就跨過4跟5所以這一種就是reordering所以我們來看這一個它是A等於B加1C等於B加F所以我們可以看到說這兩個加法它有一個共通的operand是B另外兩個一個是E另外一個是F所以我們這邊我們這邊我們說假設它是一個就是把B load進來然後把E load進來這一個就是B加1

然後這邊就存到 A然後這邊再把 F Load 進來這邊就是 B 加 F然後再把它 Load 到再把它 Store 到這個 CStore 到這個變數 C 裡面我們來看說它這樣子到底需要幾個 Cycle我們雖然已經透過這個 Forwarding但是我們知道說這個是一個 Load所以它這邊會加一個 Bubble然後這邊還會加一個bubble因為這邊它是load到t2然後這邊是加t2t1加t2所以這邊是有問題的t1有沒有問題t1沒有

T1它已經隔一個clock cycleT1它已經隔一個clock cycle所以它沒有問題它直接透過Forwarding直接就下來那T2呢這個沒有辦法它一定要有一個Store它一定要Store一個clock cycle所以這邊就一個這邊也是一樣T1沒有問題T4呢剛好是前一個指令的Output當作下一個指令的input而且前一個指令不是RTYPE是LOAD所以這邊也是需要insert一個bubble所以它這樣子

總共需要幾個clock cycle呢它這樣子到底需要幾個clock cycle呢同學可以看我們就是說它總共是五個stage對不對它五個stage所以前面四個stage走完是需要四個clock cycle第五個clock cycle結束就是第一個指令就結束了，假設完全沒有bubble的話，你就是在每個clock cycle就第二個指令，在每個clock cycle就是第三個指令結束，所以

我們真正完全沒有bubble的時候，這邊幾個指令1 2 3 4 5 6 7它就是7再加4idea的情況沒有加bubble它就是前面4個，然後後面第5個這邊是1到4，後面第5個然後idea的情況每個一個clock cycle就是1個，所以這邊總共是11個指令要完成就是11個clock cycle，再加前面的4個假設有11個這邊是7個7個

指令所以是7加4等於11我們這邊一個bubble這邊又一個bubble所以再加2所以這邊就等於是3等於是3個cluck cycle就是這樣它這邊告訴我們說我們可以做這個instruction的reordering把它的順序換一下，因為我們會發現說這個load其實我們並不需要在這麼後面執行你可以把它搬到前面去因為它寫到T4T4在前面都沒有使用，所以我們可以三個load全部寫在一起三個load寫在一起同學可以發現說這一個指令跟這個指令就沒有data dependency不是沒有data dependency就不需要

做一個store，因為它已經跟它隔一個 cut cycle所以用forwarding就可以解掉這個跟它隔很多，所以它也沒有所謂的bubble的需要，所以這兩個它們的關係就都不需要加bubble就做了一個reordering，所以它需要的cycle number就是11個7加4；同學這邊有沒有問題類似像這種Code Sequence你第一個看到的當然就是先分析這個Data Dependency有關

係的，你要先把它Mark起來有關係的，你就要注意說它們的距離是不是可以避掉這個Bubble，如果不能避掉的話，即使透過伏地點都不能避掉，你就要去找那一種後面有沒有指令可以把它搬到前面，把它插在中間的，你可以從後面搬一個指令來把它插在中間，那你的Bubble就可以解掉；我們再看這個Control Hazard，我們把這一頁看完Control Hazard就是我們提到的，就是說它必須要做這個Branch/Branch當然就是我們知道說

Branch它有兩個target它是二選一、二選一我們沒有辦法預知未來每一次都說它就是要跳就一定要跳它就一定不要跳它就一定不要跳沒辦法，所以你只能夠用猜的，你猜的話會猜對也有可能會猜錯，所以當你猜錯的時候你就必須要加bubble，就必須要加bubble；你如果不猜的話，你也一定要加bubble你不猜的

話你也要加bubble因為你不猜我們知道說branch結果算出來結果算出來是在什麼地方呢branch結果算出來是在什麼地方他知道要不要跳branch根據我們前面的designbranchbranch on equal就是這個就comparison嘛 對不對他要做減法去compare所以他compare完之後他才知道說等於0要跳如果是branch on equal等於0就要跳如果不等於0呢就不要跳所以他在這個時間點他才能夠確定他的next instruction到底是sequential還是要branch

所以它是在這個時間點它才會知道你如果在這個時間點才會知道所以請問你的下一個指令是要什麼時候進來當然就是這一個這個時間點是最早知道的它下一個時間點當然就是這裡才能進來你如果在這裡才能進來請問你要加幾個bubble這邊加一個 這邊再加一個你總共要加兩

個bubble如果你不猜的話你要等他算完所以你一定要加兩個bubble所以這個penalty非常重這個沒有辦法忍受如果沒有辦法忍受的話唯一的辦法就是什麼呢就是提早他知道這個結果的時間點所以他這邊就講說我們就必須要去compare register然後去compute target early in the pipeline所以它加了一些circuit在instruction decoding的這個stage在這個stage加了一些circuit讓它有辦法在ID這個stage就完成這個判斷

它如果有辦法在id這個stage就完成判斷的話也就是說它在這裡就完成判斷它就知道它要跳不要跳所以它下一個指令是從哪邊進來呢它下一個指令就是從這邊進來因為它現在已經在這個地方已經知道說它到底要不要跳所以我們就從這個時間點往前移了一個clock cycle這個就是我們之

後在討論這個Branch的時候我們是假設說我們已經加了一些這個Extra的這個Hardware在這個Stage使得這個Stage它有辦法完成這個Branch它的這個判斷它完成了判斷之後它就決定要不要跳所以它的下一個指令就是在這個時間點就可以issue所以它頂多就是怎麼樣呢就是加一個Bubble它原本要加兩個bubble現在

只要加一個bubble就可以這些都是在我們還沒有去猜之前它後面的猜就開始好像在丟骰子一樣當然它沒有丟骰子就是猜要跳不要跳它有一些方法還不錯就是在某一些情況它猜對的機率非常的高就是不容易猜錯同學說哪有這種事情不容易猜錯的因為程式有一些特徵程式有一些特性存在比如說，我們的

for loop，我們suppose我們大部分的for loop都是會怎麼樣都會loop。我們如果大部分的loop都不會loop，那個寫程式的人應該有問題。他明明就不需要for loop，他為什麼要寫一個for loop？大部分的for loop照理說應該都是需要for loop，所以我們如果大部分的for loop，我們都給它猜就是要回到原本的地方，那就每次都猜對就只有最後離開那一次會猜錯就是這樣子所以，它其實在有一些情況，它的猜對的機率還滿高的。我們今天先上到這個地方。.