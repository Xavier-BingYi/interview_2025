undefined
好，那我們接下來就要進入更進一步了，知道了OS它的角色重要性，它的目的之後，我們就來真的開始講作業系統或整個電腦系統是如何透過作業系統來做運作的，那這個電腦的系統，我們都知道就是Volume的Architecture，也就是你有CPU，你有Memory，你有IoDevice把它串起來就會成為一個電腦的這個架構現在電腦都是這個樣子，那所以很重要，就是所謂串起來是什麼

呢？就是，就像你把你的電腦主機打開來，你會看見的上面有Bus線，把它全部接起來，所以把各種的Device都透過各式各樣不同的Wire或許有點複雜很多還有Rocky，但是其實你把它Obstract起來，它也就是透過這些Bus把它連在一起，所以連在一起之後，你的作業系統讓在這台電腦上面的目的是什麼呢？就是我們剛才說的去控制，而且是你要去Share那一塊Memory，因為這些Device全部都是

這個直升有一個或是有線的在那邊可是，如果你今天要執行任何程式你的程式的instruction當然是run在CPU然後，instruction裡面需要用到data，一定要在memory，最後的結果你可能就寫到某一個IO的device上面去，那again，那是control的部分，但是coordinate的部分就代表問題在於今。天有很多的程式，他們都有他自己刷新自己的要求。

你要能夠讓他們同時Concurrent的執行在這台電腦上，但是又不能出錯什麼叫出錯簡單來講就像我不能夠修改到你的Memory的Content。我们倆是不同程式，所以當然我的只能夠修改我自己的資料囉。今天如果可以修改另外一個人的資料基本上電腦不能用嘛對不對所以怎麼樣子讓他可以同時的去Share就變成這個OS要去負責的事情

好那它再去讓這個CPU我們看到CPU這是一個例子來讓大家知道OS到底是怎麼樣基本的運作所以我們今天例子看到是我們今天如果有一個CPU它要對一個IO的Device比如說像是Disk要去做IO的動作讀寫一個資料那OS到底在這裡面扮演什麼樣子的一個角色那你可以看見的首先我們後面會

講更多IO那邊不過這邊大家基本上知道就好所以最後一邊當然就是Hardware Device你就想要一個一個Hard Drive那你為了要去把資料寫過去你要通過一個Controller這Controller是硬體就是一個Hardware的Controller它的目的就是它能夠做最low level的可以去Control這些Devices的磁頭比如說這個磁頭的轉動等等那你的資料的流動在這些Controller上為了要流動它一定會有看見的Buffer所以你的資料要先寫到這再寫出去為什麼一定要

有Buffer因為IoDevice很慢我們講完這個就好那CPU這邊很快所以你如果要沒有Buffer的意思就是你要把資料直接從Device就是Disk上Copy到Memory這個很久的時間你知道所以CPU一定會Idle就沒有辦法符合我們一開始說的那個概念所以在Controller上其實都會有一個Buffer

那你為了要透過Buffer去讀跟寫你就會有Status的Register跟Data Register來控制這個Controller所以Status就會告訴你現在這個正在進行IO還是說它現在是Idle它是busy還是idle那data register就是單純你可以想像就是另外一個buffer所以你很快先寫到register然後再寫到buffer那就是一個這樣的一個流程那所以咧當我們在做IO的時候其實是資料要注意到的就是資料其實是先從IO device先要寫到buffer那寫到buffer這個動作咧

就是這兩個之間這一段的IO是由Controller做就好因為Controller它是其實它自己有一個小簡單的CPU chip所以它可以去控制可以做動作，所以它可以自己去完成這件事情沒有問題跟CPU無關。但是呢後面因為Memory是CPU在使用的所以這一塊這個Bus這個後半段的IO一定要透過CPU下指令或是另外一個人下指令

去控制這些值然後去完成這個IO的動作。所以其實是分成兩段的那我們可能講完這個那所以呢怎麼做這件事情就是在CPU這邊怎麼控制這是一個非常非常簡單的基本的例子基本的方式大家知道這個我們等一下下課再講怎麼樣可以improve它那基本上接這個例子就是我要把一頓字串把它寫到IoDevice上那因為速度的關係嘛所以我不可能一次把資料全部塞到Buffer因為Buffer空間有限對不對

所以呢一個方式呢我們叫所謂的BZ Waiting的意思就是說你如果Buffer寫滿你就要等對不對等到Buffer真的全部寫到Hard Disk之後你清空了你再寫下一批。所以其實是必須要這樣子分兩段過去的，所以在CPU這邊的Code一個基本的BZ waiting的寫法就是我會一直在這邊看我的character這只是結尾啦所以看到這個character我就知道我的直傳結束而已那我就不斷地想要把東西寫出去可是我寫出去的時候

因為我會怕他在BZ就是說他還沒把buffer清空所以我這邊一定會需要寫一個while loop去pick他就是去看那個status register值是bz的那我就只能在這邊等bz waiting所以我們叫bz waiting那當這個值這個不等於0代表它沒事了這個時候我就可以把它做一個++的動作然後pork值就是把它寫出去就是寫到buffer所以其

實是一個這樣的流程那這邊大家注意到就是這個動作while在pick意思就是說你在做IO的時候其實你真正在寫的時間並不是所有的時間你其實還會花一段時間在等說什麼時候我可以把它寫出去那如果這樣的話你雖然你的Io很慢就我們之前說的嘛Io很慢你花了10個mini second這10個mini secondCPU在幹嘛浪費在某種它是某種程度的Idole對不對它只在浪費你的CPU cycle等於是在Idole一樣

所以如果是這樣的方式在做IO我們的電腦是不可能運作的或是非常非常沒效率尤其如果你寫的字穿很長的話很久的話所以這個其實是沒有辦法實現我們一開始說的IO跟CPU有沒有要overlap這個是做不到的因為它其實會一直霸佔CPU同時霸佔IO那你的電腦是沒辦法做sharing好那我們就休息十分鐘回來解釋如何透過interrupt可以解決這個問題就是現在真正OS的控制的方式.