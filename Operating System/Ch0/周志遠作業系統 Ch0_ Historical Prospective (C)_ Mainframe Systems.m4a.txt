undefined
好，那我們就正式開始作業系統的Chapter 0，那每一年一開始一定會跟大家講重申一下作業系統這門課的重要性那為什麼作業系統非常的重要呢，因為我們知道電腦的運作，它就是分成上面的程式，下面的硬體還有中間的作業系統。作業系統是三個絕對不可或缺的部分，所以基本上，在你這個在作業系統之後，你就可以對於上面的這些應用程式軟體

怎麼樣使用電腦這件事情還有對於下面怎麼樣去管理硬體資源還有，如果今天有新的硬體的device出來，怎麼樣子運用到透過它建立一個適合它的系統電腦系統出來都是靠作業系統所以作業系統是非常非常重要；連結上面跟下面的那個部分同時呢，也是我個人認為最能夠代表職工系的

課程之一就是核心課程而且他是非常能夠代表的，因為上面可能你會需要很多的domain knowledge甚至數學系的人他們的這些演算法的概念甚至比我們職工系的學生都還強對不對；還不一定是我們職工系的最強的這個強項之一那如果你往下看這些硬體的部分W1的比我們學的更紮實對不對它對於這些硬體的設計這些運作物理的部分比我們資工系的又更熟悉一些；但唯獨作業系統，它就在中間也就是資工系扮演的角色對不對，

就是怎麼樣子透過軟體去控制硬體讓使用者來用電腦這個部分這supposedly就是資工系的強項了所以說如果你作業系統學不好，那你要怎麼打贏別人對不對？你是資工系的學生，那當然作業系統這一塊要非常的扎實才對。那這是以非常積極的角度啦。所以大家應該可以體會到作業系統的重要

性。而且這個像我學這個當初我在還是學生的時候啊，作業系統就是我最喜歡一門課，因為學完之後你就對於整個電腦的運作真的就比較了解了。簡單來講，就像是你在寫程式大一大二大家都寫很多程式作業嘛，動不動就碰到segmentation  fault 或是 crash那可能大家不在乎。但是一個概念就是有bug要修一修，

那可是為什麼會有Secondary Info？你看到一個Error Message，你Compile他不會過跳出一堆的Print Out Message，這些都是你的Hint跟線索來去解決問題對不對。可是，如果你不知道作業系統你就會被人家吃虧，就不知道怎麼問題出在哪裡上完作業系統就會更清楚原來是因為我們電腦作業系統在做這些事情，你沒按照他的這些規定做所以

它會出現這些 Arrow。那所以我的程式要怎麼去修改頓時你就更清楚為什麼會有這些錯誤訊息了？怎麼樣去寫出更好的程式那你往下看呢。今天我們買了一個這個Device所謂SSD啊對不对或者說Hard Disk我插上去之後，我們會第一件事情做什麼Formatting 對不對Form at完它才可以開始存資料為什麼要做Formatting 對不對

去format storage device這個就是在作業系統在做的事情所以為什麼要做這個事你就會知道了所以並不是一個硬體要接上去插了電揮動了絕對不是這樣對不對你會發現你要去使用它的話必須要透過作業系統所以作業系統其實完全掌控了怎麼樣這些device怎麼被使用的這個很關鍵的部分所以你也就會知道為什麼

今天我們說HDD比較快RD比較慢SSD反而就會比較快這個作業系統它在控制這些檔案擺放的時候差異在哪裡從這些concept作業系統上課的concept你就可以得知一二了所以什麼是formatting我們之後也會講到所以你就會把整個東西把它給貫通在一起所以非常非常重要當然各位可以以比較消極的角

度職工系三門核心課程ArchitectureComputer ArchitectureOS大家都知道的所以大三上非常重要因為你的Architecture跟OS都在這邊還有多重要也就是說各位在學校不管讀什麼課成績怎麼樣子其實還不是最主要的當大家再去看一個學生有沒有學好有沒有學紮實的話其實是把這三門課拿出來真的就是如此會個別列出來

這三堂課的成績這三堂課的成績其實就代表了幾乎是一切所以，如果你作業程式的成績不好這三堂課的成績如果不好其他的課程再表現如何可能都會被打上一個問號所以這是非常非常重要的一門課也就是成績不好的這是你的機會了這個時候趕快把他追上來成績好的你一定要

去維持住他那對於很多我知道不是資工系major的對不對想要未來去出國每一年我都有很多這樣的學生就是需要去國外讀研究所然後這個你就會發現必修OS沒有OS你就不能去申請所以很多這個因為這個原因來申請的所以你就知道這個重視的程度有多大所以有很多的這是非常非

常重要然後需要去有的的條件包括你如果未來讀了碩士對我們西藏碩士博士必須要修OS不管你有沒有考進來你考進來之後你拿到了這個資格讀書的這個我們入學的資格之後還必須回頭來補這些課如果你沒有修過的話可以它有多么的重要所以希望大家很深刻体会希望大家多

花点时间然后很扎实的把这种课给修好好那我们今天时间还蛮有限的所以只能很简短的介绍一下这个Chapter 0的部分是要讲的东西就像我们刚才说的第一个就是我们会刚刚讲过 OS 实际是個 involve 的過程它也是不斷在演進那这些 concept 卻從來沒變過所以我们其实会先去讲 mainframe就是最早时候

的電腦叫 mainframe computer 现在你可能都覺得它是落伍古董可是我們就從這開始從這上面你就已經可以看見作業系統的角色了所以我們用這個先來看一下作業系統到底需要哪些非常非常基本的這些功能那也就會變成未來大家上課的一些章節那再來我們會介紹這個computer system architecture指的是什麼就是各式各樣架構的電腦所以從這個single core personal的電腦到分散式的系統cluster我們會看見一大堆的名詞Multicore processor為什麼會講這麼多這些各式各樣的電腦系統

原因是因為這樣讓大家知道其實有很多的電腦系統的存在所以當然他們上面的作業系統設計就不太一樣了但是大家還是一樣我們最後講的是核心但是透過這個大家應該要有一個認知到底還有哪些系統的存在就算一個簡單的一般的PC我們也可以把它兜出來變成一個更大的然

後更複雜的系統所以我們會在這邊介紹這些各式各樣的系統讓大家有一個基本的背景所謂的Systems到底有哪些類型的存在那最後就我們剛才說的後面有一些什麼Real-time很特殊的考量的一些電腦以及它的作業系統那我們這邊就只能用簡單的幾個slides讓大家稍微提一下讓大家知道這些系統的存在所以是一個Broad overview

讓大家不要只是侷限在課本講的那些最基本的部分其實你會發現有形形色色的電腦那你就要apply這些concept然後去處理不一樣的問題了好 那我們今天就會先講這個Manfrin Systems的部分好 那Manfrin Systems它算是最早以前的但是你會看見他的眼鏡作業系統這邊的眼鏡就從最早期的我們叫做所謂的Batch什

麼Batch我們等一下就一一介紹所以從Batch到所謂的Multiprogramming到所謂的Time Sharing那像Time Sharing跟Multiprogramming這個就算是今天現今所有的電腦仍然如此它就是最Fundamental的Concept所以仍然是存在的那我們就會來介紹一下為什麼需要去演進這樣子的改變你怎麼樣去使用這個電腦資源的部分那為什麼就會產生出很多Memory的

管理的問題或是檔案系統的問題等等就從這邊你就可以看見了好好所以第一個什麼是Memframe Systems呢這就你會發現作業系統先讓大家知道作業系統這堂課有些人還蠻討厭的因為你會聽到一大堆的名詞因為這是非常基本所以很多背部話大家可能之前沒有所以第一次聽到這些名詞所以

當然第一次會很生疏但是這些都是必要的，像讀英文你要背單字所以你其實要知道這些都是很基本的一些名詞它代表一些基本的意義所以還是需要去把它給記下來的，但不是只要記這個名詞而是要去思考那個名詞當初它的意義到底是什麼。那像Manframe就知道這個，實就是電腦系統之一的某一種類型我們叫做所謂的Manframe。那么Manframe最早這個事實出來，就是在形容最早期時候的電腦那所以我們叫Manframe英文的歷史就是體積很大，

就是這樣，因為第一代電腦就是筆記很大，大家第一次看到不會覺得很厲害，只是覺得哇怎麼那麼大這就要Manfred。那些電腦你可以想見當然，就是剛出的Background是因為它的技術比較落後，所以它就是必須要做比較大另外一個原因就是，因為它其實是非常昂貴的，不像現在大家隨便就買買個手機，這些的對不對電腦

當初出來，只有國家等級最尖端的研究才能夠使用到或是這些，只有很特殊的Purpose，專門處理某樣東西的才會用到這樣的電腦這樣的設備，所以這些Manframe的特性就是，它體積很大然後通常它其實，它的IoDevice這些，就是很慢當初是這樣，只是計算的Power比較強然後他做的事情，是非常單一的 juste，這台電腦就是，在管理這家銀行的某件事情

這台電 COMPUTER，就在做科學運算的模擬就這樣，一件事情他。就只做他不是拿來跑跑大家的遊戲啊，這些各式各樣不是這樣，所以這種的電腦我們就稱之為Manframe，那這個Manframe的電腦就我們剛才說的，我們會介紹前面今天應該可以cover到前面一兩個，從Batch到最後Time Sharing，就是它在程式怎麼樣run在這個電腦上當初也是過了好幾年的改變大家在想怎麼樣去設計所謂的OS，這個推出有沒有

出來我都不確定，但是大家就在想，我要怎麼樣子讓把程式跑在這個電腦上，我要怎麼樣的一個軟體系統在裡面就有這個演進的過程，那所以從中我們就可以看見作為系統的重要性，那大家不要笑說Manframe好像好老，這個是不是這是淘汰的東西嗎，然而不是如此，所以我們剛才說過意義Manframe當初

有它的時空背景，但它很多意義留下來了，也就是現在意義是什麼呢，就是它是專門在處理某一件事情的機器，而且是大量工作的機器，我們仍然叫做它Manframe，所以像現在很多的這些Bank裡面他們用的這些Server這些伺服器，如果你要更精準的說，它就是一個Mainframe，那也因為它是特殊做的這件事情是很

重要，然後是專門單一Purpose的不是隨便可以Access進去的，所以你會發現這些Mainframe在設計上，它指的就是那些Reliability特別好就是不會Fail的機率比較小的就算電腦有些Component壞掉，它也不會整個電腦就Crash這就叫Manframe還有它的Security、Security非常重要嘛所以如果你break into CIA或者是這個FBI總部的電腦，那個就叫Manframe那Security可不是隨便可以去compromise的對不對，所以這就是設計這張電腦的時候

一定要特別注意的那種電腦才叫做Manframe。現今仍然常常存在而且都是扮演非常重要的角色所以這就是Manframe那最早時候的電腦啊這些 mainframe 它要怎麼樣把程式讓在上面咧大家可以看見是如此的簡單跟難以想像也就是最早的時候電腦出來咧你要寫程式不是這樣打打鍵盤 keyboard 就好如果你問系上有一些比較資深的老師他們都還經歷過那個時代就是要打卡我不知道這個大一的介紹的時候有沒有提到這些

在那邊打洞那就是你的城市了然後寫成就是準備寫一大堆的卡片然後把它放到機器那邊然後開始讀那些卡片然後開始做運算很難想像，但真的是如此所以你會看電腦的音埠就是這樣，一堆的卡片每一個電computer能夠做的事情也非常非常簡單它一次只能夠算一個程式它只能處理一個程式，就這樣子，所以這個人處理完了我們抱歉,其他人就在那邊等一人的份，慢慢的排隊，

因為這樣子，所以就叫做Batch。什麼叫做Batch呢？就是指英文的意思就是批次檔所以大家去看註冊系統的電腦打開你按照Microsoft的，你會看到什麼Batch檔有時候會注意到就是那個開機的程式它最最最原始的形式的那些程式它就是要獨佔整台電腦然後做完它，你才能夠做下一個所以是一批、一批、一批所以它就叫做Batch

每一批裡面可以看見跟現在的程式仍然是相同的架構對於程式而言，使用者而言也就是一張卡片說我要開始實行一個程式所以它可以有程式的ID讓它可以去認知到它是誰的然後就會有你的程式然後會有一個Node的一張卡片所以意思是什麼就是大家也都知道的程式要執行要先Load

到Memory因為CPU是讀不到硬碟的它只能夠Access Memory所以Load就是把這些東西把它Compile好之後Load到Memory然後開始做執行的動作執行的過程中它可能會有一些Output或者是使用者要給一些Input那這些Input就是一樣一堆卡片所以它就會讀這些Input做執行就跟現在的電腦一樣所以你在Keyboard上打當初就是塞一堆卡片然後結果結束它可能就output另外一張卡片是它的結果所以就跟現在電腦的這個架構其實是一樣的

但是這個罪惡系統你會發現它是多麼的簡化因為它完全沒有管理的能力只是要能夠用它就好所以一次就一個檔案在我們的Memory裡面我們知道電腦運作很重要的就是MemoryMemory裡面你可以看見它是前兩塊上面那一塊就叫做OS那一樣因為他要運作他要管理那些城市嘛就是統稱的OS所以當然他本身也是一個城市所以當然就像我們知道他需要再用一塊Memory的空間

那但是因為這個架構是如此的簡單或者說OS的設計是這麼的單純所以它是把Memory就是拆成兩塊因為也不會有別人嘛因為直接換你，我就是整個Flush掉、清掉換下一個人所以完全就是把我們的Memory的空間定死的切成兩塊上面一塊作為系統下面一塊就是你的User的空間你要怎麼用？隨便你那你用完了，我就這樣殺掉然後換下一個人來用，這就是Batch那所以你可以看見，

這個註驗系統這整個出源過程，使用者要去ServiceJob排卡片的順序，排錯也會fail掉然後呢，這個Operator，因為今天會有很多使用者所以每個人都帶了一捆的，一疇的卡片給這個電腦管理者，然後電腦管理者要負責決定誰先誰後，是人喔，是Umbrella那個人來說今天A會決定先後，然後再C再D怎麼決定？他自己決定的，跟電腦設計不關係的是人來做決定，

電腦只做了一件事或是OS只做了那麼一件事就是在Transfer Control也就是OS執行它的程式的時候可能會通過OS的code然後讀一讀來去User這邊讀一讀然後整個做完之後我就把它清掉就這樣子所以它只是負責在Transfer從一個Job到下一個Job之前在那邊Initialize還有去Cleanup就這樣而已這是最早的作業系統簡單來講就是，什麼時候要做，不需要難題，反正就只有一個人在裏面，這個content是你的，你還要怎麼用，你也沒有secure你的問題，因為只有你嘛所以你有total control，

這是最早期的作業系統的，那這樣的作業系統我們就稱為batch的system，一批一批一批這個是最早的電腦，那很明顯的這樣的電腦非常的必經的替代當然就有非常非常多缺失甚至於你可以說是無法容忍，但當時能夠用電腦就很幸福了，所以就算它慢，就算它要花很多人力還是大家可以接受它有一些非常非常嚴重的缺點

想一下就可以知道第一個one job at a time對不對所以我們剛才才說不然電腦少數人可以弄一百個你要弄一千個程式在上面都不是問題很多做應用你就是需要這麼多的程式才有辦法建立出來但是當時那樣的電腦那樣的OS它就是能限制一次一個job一個程式就這樣所以它很單純但是是一個很大的限制

第二個,No Interaction所以說你就是丟一堆卡片給他然後他就吐出一張卡片，just this way這中間的過程，你如果忘記塞什麼東西或執行過程中你想要改變任何事情抱歉之做不到的他就選擇這樣讀過去而已所以完全沒有interaction也就是說 像你都知道尤其現在的城市都是interact的interact就是一般的手機你就在那邊觸控所有事情其實都是given by 人的event，那些interaction在剛剛的片段，你會發現完全做不到因為他根本不知道什麼時候要

讓人來介入他就只能出一個程式就這樣line by line很單純最後一個也是最大的問題當初就是這個電腦很貴很貴在加拿大當時都是非常貴的東西可是你卻發現他的CPU居然都在挨揍也就是他都在那邊沒做事情我們跪擺在那裡，結果他只是好看而已根本沒在做事為什麼會這樣子？因為IO非常的慢對不對？

因為你看看見我要卡電腦進去那個可能是機械式的所以當然很慢跟這個電子對不對？跟電機系統更熟對不对？ CPU計算很多塊一定會有一個很大的差距，所以變成說我在就在那邊等著做input跟output，CPU又在等，所以它就在那邊 Idol就浪費掉了這個問題，即使在現在的電腦也是一樣。不管這些科技再怎麼進步，我們大家還是知道，你手上的手機，它的CPU的計算的frequency，它的每秒鐘會出instruction非常非常多，

那IA這邊就算現在再怎麼去優化你輸出控制等等，它的速度還是遠慢於CPU，所以這個問題其實仍然存在。所以我們來說concept沒有改變問題的本質仍在那裡。所以當初當然就想出了一些解決的方法，那現在呢依然是如此好，所以可以看見我們到這邊看到的是這一塊。這個第一個跟第三個也就是我們等一下

會介紹的這個Multi-Programming那怎麼樣可以讓CPU不要Idle怎麼樣可以讓很多的Jargram就是你要塞很多的Program進到這台電腦嘛對不对所以這就是我們等一下會講的下一代的問題是Multi-Programming要解決的問題 Interaction指的就是Time Sharing所以我可以讓這些程式很快很快的切換所以除了你IO的其實是一支程式那這才是如果切換得非常非常快速的話使用者就不會有感覺就會以為我以為我一直在跟這台電腦在運作或者說我們可以同時使用這台電腦

原因是因為我們用了Time Sharing這樣的一個作業系統的概念去share這個時間讓每一個人誤以為他擁有這台電腦那個人更慢人的處理速度當然也不及電腦所以其實電腦可以偷偷的處理很多人的事情讓每一個人都覺得他可以跟這個電腦在做interact其實還是step by step所以這就是很明顯我們就從這邊看到一些問題我們等到之後

下一次必須要等到下一次介紹兩個非常重要的Money Programming跟Time Sharing這兩個概念的時候就是要解決這個最基本的問題你可以看一些筆蓋的概述OS就是什麼都能做所以這邊我們還有一個東西叫OS這個問題但還不需要解決任何問題.