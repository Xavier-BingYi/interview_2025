undefined
接下來我們就介紹各式各樣的computer system architecture其實我們的電腦不管是什麼電腦都會遇到我們上面說的這些問題，但是電腦的尤其是以Hardware的角度來看它的形式還有它的組成的方式其實是各式各樣的。我们都知道電腦的形式，其實有非常非常的多。所以我們就會簡單的先介紹像這個PC最早期的，這個很快大家看過就好。

但是我們會多介紹就是Hero的System也就是很多的電腦它並不是只有一個CPU core可以計算通常是有很多個的，甚至於這些不同的電腦它可能是Lucy-Couple就是透過網路現在很多電腦它稱之為一個系統可是並不是在同一個地方像Internet其實你可以說它是一個系統是一個單一的系統只是透過網路很遠

端的這個網路的方式去把它連結在一起的。所以我們就會來介紹一下這些形形色色的這些電腦系統尤其是以這個它的這個計算這些computing core之間的連結的發展來介紹一下那第一個當然這個大家稍微看過就好一定沒有人不知道對不對。所以最早期應該說最單純最簡單的電腦的話來講

就是只有一個Single's Core那早期的Personal Computer就是這個樣子那這些我們只要講到PC為什麼叫Personal因為就是指每一個人都能夠擁有他自己的一個電腦系統所以我們都知道當你在買這些PC或者說現在來講買手機那大家會想要的是什麼最care的我想都是Convenience好不好用所以這些像手機的設計其實它都

是花很多的功夫在裡面讓它可以最方便的去使用另外一個就是要有responsiveness因為這些personal的computer都是interactive的就像剛才提到的所以你一定會希望它很快的給你回應如果你今天做一個動作他要等個幾秒你就會覺得你買的這個東西可能是不好的就會不滿意對不對所以interactive是非常非常重要就是要很快很快的response time所以才更是我們剛剛講到的time sharing的系統對不對幾乎現在電腦一定是time sharing因為互動是非常非常重要的

那第二個特色就是它的Io的Device了對不對所以不只是Keyboard這些其實這個演進非常非常快所以像現在來講就是這些Screen未來其實很難講甚至於你也可以說現在已經很多是用聲控啦對不對所以你根本也不是Screen喔你就只是Speaker啊對不對就是收音器啊你只要用講話就可以去控制那這個也是

IoDevice啊所以這一塊其實變化非常大那對於這些Person al的這些Devices不一定是PC，像手機也是其實這個是一個很重要的一個要素。那不斷的去再做improvement，現今仍然如此，那這樣子的一個系統當然他都有他的這個需要他的作業系統的存在。那早期的這些PC來講大家一定都很熟悉啊Linux、 Max OS、Windows是以前大

家最熟悉的。現在大家可能更熟悉這些Apple的OS了，甚至於手機的OS Android這些，所以其實不同的這些電腦其實它都有不同的作業系統的存在像這些作業系統的特色是什麼你就會發現Convenience所以他們一定有很好的GUI對不對也就是Graph的User Interface又透過圖像的方式或甚至於透過這些很特殊IoDevice的方式讓它可以操作這些就是這些Personal的這些OS的特色。那這些OS尤其是像早期像Windows，它最大的缺點就是

會很容易的被入侵，就是Security這邊通常都非常非常的差。那第一個原因是因為PC這些算是比較早期，所以他的這個Software的Architecture這些沒有Define的這麼好。他只是希望能夠很快的可以運作等等，所以說他可能Software Design有一些問題很容易會被人家找到一些問題點然後可以去侵入去修改裡面的程式執行的東西

那還有一個最主要原因其實是當初的Personal沒有想到Internet這件事情早期PC出現的時候根本沒有Internet所以它的Security只要使用者不要惡意的去破壞自己的電腦就好那這當然不會發生可是現在不一樣現在都是連到網路所以你會有很多外來的使用者甚至於是根本沒有授權你根本不expect的使用者他就可以透過網路

去修改你的東西那因此這Security這邊當時就沒有做得這麼的嚴謹那就會產生很大的問題像前陣子大家才有很大的News我們的ATM台灣的這些ATM的Machine就被人家植入一個病毒它就可以自動吐鈔票這個是非常神奇的我常常聽到做Security的人去講這些事情但是現實生活中就可以發現真的是存在

的很容易可以透過各種Wireless這個Communication的方式去跟一個系統去做溝通然後就有可能去危害到這個系統那早期的PC沒有這個作業系統沒有想到這麼多的問題所以就沒有設計的這麼的完善剛剛是很單純的一個電腦就是一個使用者然後一個CPU的Core可是隨著大家要的計算量越來越大我們都知道了其實你買來一個電computer系統裡面通常不會只有一個CPU的Core通常都會有很多對不對這很多的組成起來的電computer

如果當它們是非常緊密的連結在一起的時候我們就稱之為所謂的Multiprocessor的System，也就是什麼叫做緊密的連結呢簡單來講，就是這邊看見的也就是這些CPU的Core，它是透過一個System的Bus，也就是Hardware的Line去把它給連結在一起的這種，通常我們就稱為所謂的Multiprocessor System或是Tightly Coupled，也就是你買來一個盒子裡面，它就全部都在裡面然後用Hardware的方式，這個Wire的方式，把它結在一起，這個就是Multiprocessor，那這樣的

方式，你會發現，它的CPU一定是共用的，因為我們知道電腦就是Memory、 CPU跟IoT Device，那IoDevice當然是Shared，但這邊你可以看見的是Memory，它也是Shared，所以所有Run在這些CPU上面的程式，他們都是可以看見相同的Memory的Content，那所以如果他們同時去修改的話，當然就會造成Synchronization的問題了，那這個樣子的通常，這個我們說Tidy Couple，就是你有一個Shared的Memory然後用

Hardwire的方式，把它連在一起，是這樣形式的一個平行的計算系統，那這樣的系統，其實非常平常啊，因為今天就算你去買一顆CPU好了你以為它是一顆CPU你買來一個Chip對不對可是我們都知道其實它是多核心CPU對不對四核心八核心甚至於更多所以其實你這樣買來一個單一的這個CPU的Chip

上面也是多個計算核心那麼它就已經是一個parallel的system了就是一個typically coupled的平行系統那這樣的系統的衍生出來原因其實是必然的啦第一個原因是因為我可以在相同的空間內它的throughput就是我每秒鐘可以計算多少的計算量一定可以增加因為製造的技術越來越發達我們可以塞

越來越多的核心到一個chip上面去所以透過這樣的方式我們就可以增加它的throughput了就是它的計算能力啦所以我們知道現在都是越多核心就是越powerful的CPU了嘛對不對第二個咧就是因為它可以有這個economic也就是說其實很多東西我們就可以share了就像這邊可以看見Memory可以

shareCPU可以shareIO device可以share幾乎所有的這個motherboard主機板都可以share所以說相較之下與其你把它拆成很多個獨立的電腦你還不如把它拼在一起這樣你可以很多東西可以共用就可以省下成本所以這個是另外一個越來越多電腦是往這個方向走的原因最後一個在Pure Fire System裡面是有用到可是沒有這麼大的影響就是Reliability也就是說

今天你有這麼多的CPU core的話相較之下就是說今天如果有一個CPU它運作可能不太正常或者壞掉的話其實這個電腦系統還是可以繼續的運作的因為它有很多的CPU所以如果有一個不正常其他的還是可以繼續的去使用但這個只是提到啦大家比較需要記得我講還是ThruPool跟Economical這兩個原因那這裡大家要稍微知道一點就是因為現今的電腦系統其實全部都是Multiprocessor的Computer System了那所以這些Computer System其實我們又可以把它稍微做點分類

變成所謂的Symmetric跟Asymmetric也就是SMP減起來SMP或者另外一個就是這個應該是這個AMP這個Ansymmetric的Multiprocessor System那為什麼需要知道這兩種系統呢因為其實這兩種不同的系統的話這些Processor在執行它的角色其實有點不太一樣的所謂的SMP呢Symmetric意思就是所有的人其實所有的這個Processor這些CPU的Core他們扮演的角色

都是完全相同所以沒有任何一個人是 Master也沒有人是Slave，大家的角色都是相同都由OS來控制說是哪一個程式讓在哪一個CPU Core上面，他們都是對等的，那就叫Symmetric。當然現在大家手上的這些CPU，你會發現全部都是SMP應該全部啦，因為他比較簡單嘛，對不對就是比較單純一點；重點是，每一個CPU core他都可以去做計算，所以你只要並不會有一個CPU core他只是負責管理別人就會浪費掉，因为大家做的計算其實都是很general的一些很基本的計算，

所以如果已經有很多的Core，那我就可以讓大家都去分擔這個Loading，這樣會比較使用率可以提高一點。那它的缺點就是，你要去Synchronize這些不同的Processor上面的程式的時候，那你就會需要一些Locking的機制等等，所以通常這樣子的CPU，就是Multi-Core的CPU，它的Skill就是裡面可以塞多少個CPU Core的數量會比較少一點；會比較少一些，因為你要去很複雜嘛，每個人你沒有一個班長所以自然會比較亂對不對，

那當然就要透過其他的一些protocol啊規則啊等等那些都是一些overhead，所以SMP的CPU或是這些Processor System通常它的scalecore的數量就沒辦法長到那麼的大，那一般的各位使用的這種消費性的電腦系統當然對計算還沒有到這麼高的要求所以用SMP的就可以足夠了，但是如果很多像是一些Supercomputer或是一些很特殊的

電腦系統他希望有非常非常計算多的Core在裡面的話，他們會採用的就是Asymmetric也就是不對等不對等的意思，就是說簡單來講就是裡頭有Master所以有一個CPU的Core他是Master他專門負責去管理所有其他的人所有的指令都要先透過他然後再讓其他的Core去做決定再去做執行的動作，所以通常他就可以到比較大的Scale所以他這個通常Core數就可以

比較的多，但是相對的缺點是什麼就是那個Master他等於是基本上不能做計算，就是使用者的計算他只是在管理而已他當然就浪費掉了所以這樣的系統其實是存在的而且是對於一些比較注重Performance的電腦系統他們是會使用這樣子的Multiprocessor的CPU，但是各位一般去買的當然是比較少看見不過要稍微知道當你有很多Core的時候根據它的角色會分成Symmetric跟Asymmetric所以

這每一個CPU如果我們再往裡面再往裡面看進去的話就會發現因為我們一個CPU的chip上其實通常會有很多的Core對不對所以這些很多的Core就會成為這個所謂的Multicore Processor也就是一個CPU裡面它就有非常多的計算核心在裡面那這些計算核心的話你就會看見所謂的這個計算核心會有很多意思就是你買來是一個chip裡面它就有非常多的這個core在裡面那雖然說它的memory是這個memory因為不在CPU上面嘛對不對

所以當然你把它放到motherboard上的時候他們其實會share相同的memory就是看見相同的這個memory的content但是呢現在的電腦的設計你都會發現這個中間從Memory到CPU的這個Register中間其實都會有所謂的Cache對不對只有過Computer Architecture就會知道其實有Cache幫忙去做一個加速的動作把資料常用的資料可以把它Cache起來那所以當你有不同Core的時候其實它們的Cache就會是不同的也就是Cache其實它又還會分成Level 1 Level 2 Level 3其實比較複雜的電腦系統

它有很多層的Cache那到了最上層我們通常說是L1第一層的Cache最接近這些Register Cache通常基本上一定是每一個Quad有自己的所以就會變成像這邊看見的其實你的資料呢它會被Copy到不同Quad ad的Cache的上面那這個Copy到不同Quad上面的時候，你有這個複製雖然它可以讓速度變快可是你要注意到的一點就是因為它只是複製所以它們裡面的內容應該要是相同的對不對

可是呢，如果今天這個Core它要去改寫這個Content就是它的內容的時候，因為這邊有Cache嘛，所以它可能只改到它自己的Cache而已那就會造成不同的Copy之間它的內容不同的一個問題，那這個就是必須要能夠去解決的一個很大的問題。那現在電腦基本上都是透過Hardware的方式，也就是你買來CPU他就會自

己去跟Memory還有跟這兩個Core上面的這個上面的管理Cache的這個機制去溝通然後去Make sure今天一個Core去Override一個Cache content的時候，他會把這個資料反映到Memory或至少反映到所有Cache相同Memory Content的這些Cache裡面這樣，你才不會執行程式在這個Core上面執行的時候看到內容跟另外一個看到內容是不同的，因為它只是複製所以應該要看到是完全相同的尤其現在電腦我們說常常在做Switch意思就是說你的程式在今天或許是先在Core 0這邊執行可是

可能過幾個mini second你就會換到另外一個Core對不对所以，如果裡面看到的資料相同的Memory address相同的變數我沒有去動它，它應該要一樣的值嘛，所以如果換到另外一邊，我看到的東西是不一樣，這個就會造成Programming上的一個問題了，那這個部分就是這些Multi-Core Processor，它要去處理的就是要Make sure這些Cache它的資料是一致的所以這個Multi-core指的就是它，並不只是我們剛剛前面說你還透過Memory bus.

Multi-core它是在單一個CPU就有好幾個Core，所以它是所謂Tight裡面是最Tightly coupled的一個方式，所以在同一個chip上就把它燒在一起了，但是其實你會注意到它們很多東西還是沒有Shared，但是必須要讓它處理到看起來是一致的情形好，那我們再多介紹一點，還有更複雜的，所以剛剛看到的是一個Core而已，那現在呢，因為這個計算量的需求，而且希望把他們全部這個越緊密連結在一起越好，所以我們過去五年開始變得非常非常熱門的Processor叫做Many Core Processor，

所以不是只是marking用many來形容說你在同一個device上面或者說同樣的一個processor上，它的計算的核心數是到幾百的等級這就叫做many所以越多當然平行度越高就越powerful，所以在現今來講我們最常見到的就是所謂的GP GPU所以有些同學可能有聽過就是用顯示卡來做計算，有沒有因為顯示卡它以前只

是拿來做圖形的這個Display而已對不对可是大家發現一般的計算就是General的計算，一般你們寫的程式的Application裡面也有很多是很適合這樣子像是在做圖形計算這樣的類型的計算，所以如果我們可以放到GPU上面去做計算，它的速度就可以更快了那可以更快的原因就是因為我們知道其實一個GPU

裡面它可以塞進的Core的數量是幾百的，就是非常非常多數量的，那它會這麼多其實是有原因啦就是它有犧牲掉一些東西也就是如果以這個它的計算的Architecture的角度來講我們稱之為SIMD就是Single Instruction Molecule Data的Processor意思就是我雖然有700個Processor在裡面可是我同時間很抱歉他們只能做一個Instruction而已可是他

們可以再Apply這Instruction到不同的Data也就是Molecule Data所以你可以想像如果你今天在做一個Array的計算大家都學過Linear Algebra做一個array的計算其實你就在做同樣的事情然後只是放到不同的column跟row上對不對所以這些processor去做這種matrix的計算的時候它就會非常的適合就是可以做這種計算而且就會非常的快因為它可以同時算所有的row所有的column那。但是一般的程式當然我們都知道其實很複雜的嘛你都會那你都會有很多的這個

if else condition對不對所以其實你很多時候你是同時間需要做很多不同的刷新那這樣子的計算很抱歉就沒辦法放在GPU上了。但是GPU還是可以針對這些特殊的這種程式它就可以達到加速的效果而且非常非常多的Core所以我們叫做Many Core。那這個GPU是現在最熱門的啦。但是自從GPU這個idea這個開始被大家使用之後

Intel傳統的這些general purpose的processor我們知道最大的這個廠商當然就不落人後所以他們就也發明了他們自己的device叫做Xeon 5。大家有興趣的可以自己再去看一下。那它就介在傳統的CPU跟最像GPU這種SIMD的中間所以它可以塞進可能50個CPU在裡面那它可以比較flexible不一定要這種SIMD但是它的Core的數量也沒有辦法像GPU這樣到幾百甚至於到幾千個Thread在上面就是介在中間的一個角色但是概念一樣就是說

重點是大家知道的就是其實大家在設計Processor的想法上跟以前很不一樣現在大家都希望是能夠增加Core的數量而且是所謂緊密是緊密到就是在一張卡上面或然後把它全部的放在一起然後很大量的程式很大量的這些Thread或Process可以執行在上面讓使用者一買來就有一個好像非常非常Powerful的一台電腦這個就是現在Processor的演進就跑到這邊了好那我們就休息個十分鐘我們剛剛delay一下11點20分我們再開始繼續介紹.