undefined
各位同學好！歡迎來到這個作業系統這一堂課，那我是周志遠，是這堂課授課的老師那我們這堂課作業系統的課本是這一本叫做Operating System Concepts那這本書呢，就如同作業系統一樣，它是我們的這個志工系的聖經之一就是最重要最重要的課本只要是教作業系統大概80%尤其是知名的學校等等幾乎全部都是用這一本所以稱之為所謂的聖經那你可以看見這個書呢，它實際很久就有了我在讀書的時候也是用這一本而且都已經到了第六版了

可見第一版有多糟所以是非常非常古老的一本書了那這本書隨著這個這幾年都有很大的一個就是他都有不斷的在翻新版本所以就現在最新的我們會使用的是以這個第九版為主那也就是這邊這一本大家可以看見那非常建議大家去買這本書，因為如同剛才說的這是非常重要的一門課然後是非常非常重要的

裡面的內容是非常基礎的所以說非常值得參考，但每一個版本其實不必太在意你們買的是哪一個版本其實它每一版的改版的內容差異非常的非常的小尤其是最重要最核心的部分其實沒有太大的變化所以如果你在圖書館啊街道或是從哪邊有人這個可以給你比較舊一版本的這個作業系統的書的話其實沒有關係你們可以就去用無所謂但是非常非常重要是每一頁都提醒但是的確最近這個狀況越來越多的就是大家都

只看課堂上的slice因為都幫你整理好嘛可能考試也比較會從slice出來但是呢各位絕對要去仔細的看這本書裡面的內容每一個章節因為裡面講的才是details才會把很多很重要的觀念講得非常非常清楚上課畢竟時間是很有限的一個小時後就兩個小時就一張就過去了一些例子等等可是這書裡面他怎麼樣去形容這些裡面的這每一個的定義還有例子等等他會解釋得非常清楚

所以大家一定要去看裡面的書這樣才不會有考試的時候才會問到老師這個講的時候好像沒有講清楚或者說怎麼講的不太一樣那其實一定是以課本為主的所以希望大家一定要好好的去看裡面的內容是非常值得看的那這本書你可以看見它叫做Operating Concepts它用的concepts這個turn其實是非常好的我認為是非常非常好的一個

這個含義在裡頭因為有兩個原因第一個電腦演進非常的快對不對我們等一下第一節就會介紹從有電腦開始我們稱之為電腦就有作業系統到了現在我們雖然只過了四五十年可是電腦的發展大家都看得見非常非常大所以作業系統當然還在那裡可是電腦的形式啊它的功能啊等等變化其實非常大的所以你可以

想見其實作業系統這個東西這個軟體這個系統的設計本身一定改變也非常非常的多但是這本書我們剛才說了它已經出了這麼多年了，內容也不太改為什麼？因為它介紹的就是核心的概念，這個是就算電腦再怎麼改變，也沒有做變動的部分，所以其實並不是要教大家現在的大家可能比

較care的是Android手機上的OS對不對，還不是要教各位手機上OS到底是怎麼運作的不是這種最新state of art然後是這些東西，其實他教的只是核心的基礎而已，所以不管未來在變這個在做什麼樣的變化電腦的形式等等，在做什麼樣的改變，你會發現概念仍然就是那一些所以呢，他這個concept就是這個

核心的部分，而不是要教大家最advanced然後最複雜的，甚至於各位發現我們上課教的那種怎麼好像很隨服我啊很多設計的方法概念這個都想得到嘛，因為他只是要告訴你一個概念當然到了你真的去看一些作業系統更複雜的作業系統的時候當然不是這樣簡單的，所以才有這麼多的研究繼續 ongoing 去設計未來的 OS

等等，但是它的核心其實就是那些不會變也就是我們這堂課要教的部分第二個部分的話就是說你可以看見它的 concept 就是說其實它只會教到你就像剛剛提到的概念這個事情它是最核心的，但它也只會教到它的概念所以真的 OS像我們剛才說的到底怎麼運作你今天知道這個概念你怎麼

樣可以把它真的實作出來我今天真的有辦法做一個作業系統嗎，這本書就沒有cover到這麼多也就是像實作啊還有一些這種Hands on的東西它就畢竟是有限我們大概看見內容其實非常非常多所以沒有辦法cover到這麼多然後這麼的廣泛那這是為什麼我們這堂課會有增加會有作業的原因了

就是想要彌補這本書或者課堂上的slides只有cover到concept概念卻沒有實作的部分所以我們會有四個作業讓大家去修改一個教育用的模擬的作業系統雖然聽起來好像只是教育只是模擬但其實它該有的都有我們等一下就會提到所以就是各位會需要去實作真的去寫這個OS裡面一些最核心的控制的部分的程式然後需要去Trace所以才會說其實Programming的Loading是不少的那需要有一定的Background知道怎麼去Trace code這個是

這個書本的部分所以非常建議大家去買好那剛剛也提到了那我們這堂課最大的特色就是會有這四個程式的作業去修改一個simulated的OS而且是for education它純粹就是為了上課教學被開發出來的作業系統那這個作業系統叫做NACHOS就墨西哥那個洋溢片那個NACHOS當然不是大家可以去看一下它的全

名是這個全名當然是跟OS等等有關的只是簡寫變成NACHOS好唸好記嘛那這個呢，其實在國外，在國外的大學尤其知名大學還有國內重要的學校，其實都已經在使用這個NACHOS，所以它並不是一個什麼很特殊的，its實是一個大家公認是一個很好的、一個教學的一個軟體就是提供讓大家可以更了解

它的code的部分的幾個教材，所以其實它的這個相關的資料，其實是蠻多的當然你要去查用英文查不是中文查中文大家都查不到這些比較國外在使用的東西，畢竟國內還沒有到那麼那麼普遍，但是每一年都有越來越多學校開始去使用我們開這堂課已經用了好幾年從第一年開始，所以已經到第六年了，

那所以其實裡面的這些內容設計還有份量因此也就每一年每年都在增加一點那今年去年很重要的加入File System的部分那今年就沒有再增加了，所以這是good news，但基本上已經蠻多了啦你可以看見這三個主要component都有了所以我們當然沒有再繼續加下去，那所以有任何疑問大家就是GoogleCommon Science最好

的地方就在於全部在網路上都可以學習，所以NACHOS，你絕對可以找到非常多的相關的資訊還有討論都可以找得到這些資料，但是當然就希望大家也不要過度的去查也就是說甚至於去找答案，這些這就非常不建議了，並不是要大家找一個答案出來給我們而已是希望你們自己去寫然後去跟課程的東西做聯想那我們在DEMO的時候

助教當然會問問題而且是兩位同學都會去問所以你們的分數不是說同一組分數反正就一樣不是這樣子TNN會去看你們的貢獻度還有回答問題的內容去做一些調整所以說一定要自己真的了解自己動手下去寫不要過度的去找答案而已但是這個作業會發現真的比較challenge尤其跟你們之前的作業程式作業也還是不一樣那第一個

這個code是用C++寫的，supposedly這個問題應該比較小因為大家職工系一定寫過C一定會C對不對那或是有background一定都有C那或許沒有用過C++可是如果你上過OO的課Object Oriented現在大部分比較新的language都是這種物件導向的觀念你有那個觀念你會C的語法結合在一起那就是C++了所以其實你應該把所學把它這個結合一下應該問題不大但是如果這些概念都沒有沒經驗當然會非常非常痛苦那就不太建議了第二個Linux的Coding Environment

所以我知道很多人之前的程式雖然就只focus在自己的程式所以大家都跑在Universal Studio這些就是這些GUI介面但是這堂課竟然是OSOS當然就是Linux對不對因為它Open Source所以你可以去改可以去動而不是Windows只是一個Commercial包起來User Friendly這樣子而已所以對於Linux這個作業系統應該要做一個更進步的了解所

以這堂課會是你非常好的機會開始去對這部分了解以前如果沒接觸過Linux的話應該用這堂課開始在上面熟悉在上面做就是做一些簡單的Code Tracing檔案的處理Compile執行Debugging等等這些非常基本的這些東西Command去熟悉一下所以我們的助教會Setup這個環境其實也沒有什麼特別就是login進去你就在上

面開始使用只是說你都要用一些command的方式而不是用滑鼠點點這些東西那其實並不只是說為了這個寫程式你會發現你再去使用這個作業系統之後因為它更貼近了作業系統本身不是透過一個頁面透過一個視覺化的東西你會更能夠去感受到作業系統的運作我們這堂課其實教了很多的東西就是你們下這些comment在做後面背後的事情而已所以其實你真的去操作這些comment然後去看他output出來這些東西內容data等等你就可以

更能夠感覺到他之間的關聯性所以非常非常建議大家就是開始login進去然後在上面完全在上面去寫程式debug等等未來你們去工作也一樣一定很多不少都是在這種環境的所以千萬不要等到去工作才開始學在學校就是一個很好的機會那尤其有些問題什麼TA等等都會可以給你這個協助所以同學也可以討論自己上網查一下-comment line有哪些這樣子其實不會太複雜的好最後一個也非常特別的code tracing

所以之前大家的程式作業我相信幾乎都是從頭開始-from面開始寫對不對從頭到尾就是自己的程式然後可能你很了不起寫了1,000行覺得這整個是我的這個畢生的目前為止最好的milestone了你會發現未來碰到程式1,000行好像沒有什麼都是幾萬行幾十萬行那所以當然不可能是自己寫的啦對

不對沒有人會從頭到尾把一整個這個系統或是完整的東西全部自己寫這種機會其實是很少很少發生的所以真正到未來你們寫程式的時候多半都是在修改別人的程式對不對所以你要知道先看懂別人程式的架構是什麼然後知道我今天要做的這件事情是在這整個程式中的哪一個部分然後我怎麼樣去做debugging

我改寫這一塊之後他就連compile都不會compile了那你要能夠figure out為什麼那所以這是一個很大的差異那這堂課呢因為當然不是別人寫的啦對不对而且各位要去改的就是我們剛剛看見那幾個部分而已那幾個部分不代表只在一個檔案喔是只在好幾個檔案所以，這叫做Code Tracing，你要知道它的Code Path

對不對，所以這每一個每個這個程式的這個檔案還有Function Code之間的順序是什麼，所以我在哪邊要去改動的話其他地方也要相對應的去做調整，這就叫做Code Tracing，所以這堂課必須這麼做，所以一定要去，你會發現這幾個作業，第一個Working Item就是請大家先去看一下它目前怎麼實作的整個實作的流程，

那你Trace完之後了解了，你再去判斷我要改的是哪一塊然後呢，所剛才說的Linux上面那些Printf基本的Debugging這些簡單的工具或方式大家還是要去使用的才有可能去能夠去完成它，所以這是很不一樣的部分不是從頭到尾自己寫一個作業系統就是寫一個檔案就結束了其實是要對整個系統一些了

解，所以Again如果對於整個程式這些方面背景不足的話你就會比較吃力的，但是CS的我們訓練了兩年supposedly這些技能應該都已經有了，但你可能還沒有機會去用而已，那這會是一個很好的機會知道怎麼樣不是就是debug自己的程式還有別人的程式怎麼樣去compile它等等好沒問題，所以這是MT的部分.