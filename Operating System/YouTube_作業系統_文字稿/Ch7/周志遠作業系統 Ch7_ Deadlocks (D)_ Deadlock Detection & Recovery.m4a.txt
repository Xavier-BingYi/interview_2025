undefined
好，那最後是Detection那Detection 跟 Recovery，但是大家其實可以想見了你如果知道怎麼做 Avoidance你就拿同樣的演算法來去當做 Detection 就好了嘛差別只在於你不会管未来的你只要管你现在的状态就好所以它其实是更简单的你没有decision了你只是在detection而已你只是在判断现在到底有问题还没问题而已所以我们就一样来看第一个single instance所以我们一样可以回到就是graph的这个做法对不对所以跟刚刚比较这个不一样的地方就是一样就是有

Process然後你有Resource的Instance嘛那當然都是Single Instance所以就是不需要再就是一個Box就好那我們之前還有Avoidance你會有Clean的Edge但是這邊就不用了因為反正你不管你就只管現在系統狀態而已對不對所以你就把每一次系統狀態如果改變就把它記下來就是描述現在只要能夠Keep track of目前的系統狀態就好所以你一定可以畫出這個

Process跟Resource之间的关联图对所以这一样现在是在Request这一样是已经被Assign了然后我们就跑嘛跑这个Circle Detection如果有那就是完蛋了对不对那就是有Deadlock没有就没有问题除此之外你会看见这边有两个图其实这无所谓这个只是简化图因为你知道在这边来讲你原来的图是这样的话其實每一個 process 之間它一定會透過一個 resource 有這關聯性所以它如果透過 resource 有關聯性其實你可以把這些 resource 拿掉直接化 process 之間關聯性就好對不對因為這是 single instance

嘛所以從這裡到這裡當然是經過一個 foxword你可以把它拿掉不會影響結果對不對你只 care 就是 process 之間目前它在這個 dependency 是什麼而已你要畫這畫那都無所謂啦那就是找circle找到就代表你可以detect到現在有deadlock了好所以這就是single instance就是這樣子那model instance一樣啊就是跑剛剛的那個argorithmssave sequence的這個argorithm做detection當然差別是這邊如果你有circle

是一定deadlock了這是百分之百是deadlock了對不對那這個的話不要忘記他不是他只是check他在save或on save所以就算你找不到save sequence不代表他有deadlock所以這是差別，所以當然這個演算法，你如果真的實作他應該complex也會theoretical差不多，但是實際上跑當然會快一點，因為你可以看見對不對，所以說，但這個只是在Check它是不是

Unsafe而已，所以跟剛才是有點不一樣的，但這是因為Multiple Instance嘛，所以更複雜，你要Confirm它是Deadlock當然會花更多時間所以這邊我們只是套用這次的做法也是一樣可以來判斷所以這边我們就不用管Max了，因為這只是目前系統狀態我們只要知道目前的Location是什麼對不對，然後目前有多少的Request已經進到系統裡面

等著要被Assign了，所以這些事已經發生囉，所以代表這一個P1他已經卡在那裡，他就需要還要兩個A兩個C他才能夠執行，那你已經有Request，你已經有這個Allocate了對不對一樣嘛，我們就看剩下的Resource是多少然後能不能滿足這边的Request，那如果能夠滿足的他就可以把他的Allocation的這個Resource把他Free掉然後就可

以增加available然後再去檢查其他人，所以這边不需要max的原因是因為原來是max減掉allocation是假設最多的request這边不用假設這就是given所以這邊就是given目前系統狀態就是要這麼多resource他才能執行所以你就直接用available的去檢查request的數量有沒有達到就好了有達到就可以free沒達到就等在那裡

然後一樣如果你找到save sequence代表不可能有delog這次絕對不會有delog但是找不到它就有可能了那就代表你detect到可能發生了那就看你怎麼做recovery所以一樣的例子原來這個例子是OK的但大家一樣可以跑跑看假設我們今天把P2的要求的resource又多一個加進去的話那delog就發生了

因为这没有Avoidance的机制所以一个程式它如果要这样子的话我们系统就同意管它就全部都同意所以这值就改了改了之后你可能就会发现可能系统已经呈现DataArch的状态不要忘记这个系统它是要Detect的因为卡住的是程式是UserProgram对不对所以OS当然OS可以Wrong但是他需要知道到底程式他不跑的原因或者他是不是

已經進到DELUCT的狀態所以他才要去做這些Counting然後去做Check-in使用者當然就是看了也知道你就會Auto-reboot了對不對好 Recovery所以知道怎麼Detect之後接下來問題其實麻煩的是在這裡怎麼做Recovery那有幾種Solution第一種最暴力的全部Kill掉等於是 Reboot、嗯這也常常發生啊對不對大家電腦怎麼樣都沒回應有很多原因其中一個或許就是這個 Deadlock、甚至於把整個 OS 都卡住都有可能那你就整個 Reboot—that就把所有的 Process

全部砍掉或者是說這邊你稍微好一點意思是說把所有 Involve 那個 Circle 的 Process 砍掉，那也是 OK 的，所以 OS Detect 到了它，就只把有 Involve 那個 Circle 的 Process 全部砍掉，那這樣當然就大家重來，希望他不會再進入Deadlock的狀態，畢竟那跟Ordering很有關係嘛對不对第二種做法咧就不要那麼暴力對不对因為你砍掉當然影響很大嘛，影響使用者也有很多不能預期的問題，那所以另外一種做法當然就是One at a time、對不对我們先把一個砍掉看看是不是

可以解套然後不行再繼續砍然後就這樣子下去，但問題就是我們談到的那到底誰要先被砍掉，对不对或許你會砍掉priority最低的人，但那不一定可以解决问题，因為priority最低的人可能不是他招他的resource拿的，可能很少，所以不一定能解，所以eventually你從priority低的砍，到最後你砍掉的 process数量反而是远多于另外一个solution的对不对，所以那也不是最好的solution，所以当然怎么定义那是另外一回事，所以

這基本上這就需要很多user program information，所以這就是recovery另外一個很大的issue，所以怎麼做才會是最好，這個case by case好，那所以overall就像這邊對不对，所以你要去找一個這個victim這個要被把它砍掉到底是誰，算是你有preemption那所謂這個意思就是說你可以把它比如說像是你砍掉之後，他假設我們這些都有Rollback機制還記得我們前面張寫過，你可以

Check Point之類的做法，你當然可以把它回復啦，但是，一樣你要Support你要Partially的還是整個重來過，如果沒有Support那你就只能整個重來對不对，所以這些都是一些issue，還有另外你會不會老是砍掉同一個，這有可能啊對不对，那老是砍掉同一個人就是Probably最低的那個人，那他就跑不完，所以他就會有Starvation對不对沒

有deadlock了，你透過砍掉它來解deadlock，但是， że個程式就變成就會stop to death對不对永遠跑不完，所以這個是recovery的時候需要考量的東西好，所以就這樣所以這邊我們沒有cover很多因為其實這個很多是case by case那也就是很多要嘛就是avoid或prevent要嘛可能就是ignore讓使用者自己去解決了OK好好那這就是第七章的部分.