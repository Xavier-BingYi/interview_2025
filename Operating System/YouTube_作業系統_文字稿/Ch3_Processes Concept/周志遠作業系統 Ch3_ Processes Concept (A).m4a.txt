p.2
接下來我們就要進入到第三章了所以我們就要開始我們已經講完基本的OS的架構還有這些Background那接下來的章節我們就全部都是針對每一個OS裡面重要的Component或是說Subsystem因為我們說OS很複雜它會做很多切割嘛來一一做介紹那第一個呢就是Process所以電腦上要執行東西當然第一件事要能夠執行東西啦對不對所以我們都知道在上面執行的東西我們叫做Process所以我們就先來介紹基本的Process的定義到底是什麼

可以看到我們講定義之後會講Scheduling可是這個其實並不是在講Scheduling AlgorithmScheduling的Algorithm我們會把它再拿到後面有一個章節會仔細的再講這邊只是在講基本的我們在前面章節已經介紹過的有所謂的CPU的Scheduling跟Job的Scheduling的概念只是它的基本架構Scheduler這邊其實有分Layer的基本架構

然後在這個Process上面我們可以對它做些什麼事情也就是你可以去Create它什麼叫做Create一個Process這個定義那最後會有這個Inter-Process Communication也就是我們前面已經簡單講了一點點的Message Passing跟Share的這個Memory的Communication的方式那這邊會再多講一點那其實最後大家會看見補充那邊或是Backup的Slice也會介紹更多其他的啦因為是有很多方式但是

就是有點雜比較核心的還是我們之前介紹的就是像是Process的之間用這個Socket就是透過Network或者是用哪一些甚至到HTTP用不同的Protocol去溝通的方式做一個簡介

---

p.4
所以Process的Concept第一件事非常重要的Process跟Program有什麼差別因為翻成中文大家都會混淆因為大家都叫做程式程式我寫程式我執行程式對不對都用程式這個字但是如果你們翻成英文會發現這兩字不一樣喔這個我寫程式是叫做我寫ProgramProgramming 對不對我執行程式我的程式在執行那個叫做Process

所以其實為什麼鼓勵大家去看原文不要看中文因為中文很多翻的不是很好或是跟原意是有差甚至會混淆你其實是分成program跟process這兩個不同的term差別其實非常明顯當你去想我們剛才說翻成英文之後的話就可以連接到所謂的program重點是它是一個passive的entity也就是它是一個被動的它是一個死的東西

也就是在我們電腦世界裡，就是一些Binary Code而已。那個叫做Program，對不對？所以你寫的Code，那只是一些檔案，它沒有真的被執行它只是一堆Bits, Bytes就這樣子只是一堆Binary的File而已所以Program其實是指那些仍然就是Binary File然後只是存在Disk上面等著被執行的那些程式碼簡單來講就是程式碼而已所以叫做被動Passive的Entity

那Process呢就是Active的Entity也就是它真的在動也就是它在Execute正在Execute的這些程式就叫做Process而且很重要的區別你就會看見所謂這些Process呢指的就是在Memory裡面的Program所以重點是它是在Memory裡面而不是在Disk裡面因為在Memory我們的CPU才可以Access對不對那這個只是寫程式嘛所以我們知道它只是存在file這個disk裡面而已所以它的位置也是完全不同的所以process跟program其實差很多大家在回答問題啊或者是用字的時候一定要注意到你到底有沒有用對是差很多的是不一樣的東西那當然我們這個章節我們OS之中真的是Process不是Program怎麼寫Program大家大一大二都學過了對不對還有各種不同的Programming tool那都是Program我們要介紹的是Process

---

那Process這邊它的組成注意到它在Memory裡所以應該說一個Process我們常說一個Process有一個它的Memory的Content就是或者說Memory的Space因為一個Process就是在Memory所以它有一個它自己的Space那在這個Space裡面它其實會有一些Content主要

的一定會有的Content它可以做一些區分第一個Code Segment所以大家可能我不知道之前有課以前有Assembly的Language那個課所以會講很多現在大家可能應該還有一些基礎的課也有提到過對不對就是Code Segment簡單來講就是你的程式碼所以程式碼當然原來是在File可是當它要執行的時候我們會把這些程式碼load到Memory所以load的第一個

非常重要當然是你的程式碼因為沒有程式碼怎麼執行所以這些指的就是你寫程式碼放在Memory等著被我們的CPU fetch進去去執行的instruction而且當然這些code不是一般的code,它就是指令直接就是要送到我們的CPU裡面去的所以不是什麼C code什麼東西directly就是你compile好的code segment接下來三塊就是

各位在寫Program的時候會用到的變數所以Program厲害的地方就在於你可以去create variable那你又知道其實variable是有放在三個不同的地方這是非常非常重要的部分大家一定要知道的才對。第一個就是data section或是data的segment名字有時候segment這無所謂啦不過就是data的部分，那重點是這裡面放的是global variable也就是大家知道定義才對也就是你在你的程式碼裡面直接就宣告當我load你的program的時候我就知道

有哪一些Variable的存在它一開始就存在而且是Global就是所有的你在Run這個程式裡面任何的Function都可以Access到的所有這些Global Variable就放在這個Section裡面所以我們是一個Space我們會把它切所以當然不會切得剛剛好因為你不知道像後面我們會講它會動態增加所以有一個範圍就對了。那Code就放在那個區塊Global Variable就會放在Data Section這個區塊

再來Stack大家知道的就是Local Variable所以大家寫過Programming應該有概念，所以這些Local的Variable其實是放在所謂的Stack那之所以放在Stack的原因就是因為Local，所以那個Function扣完它就Return會消失，所以用Stack這個Data Structure是比較好、比較有效率的一次可以全部Pop掉或是慢慢地Push進去，那這些就是所謂Local Variable或是Function裡面的Variable。最

後一個是heap也就是大家的dynamic allocation大家最怕的最自由，但是自己要使用上最要小心的部分就是你去做一個maloc或者是runtime去create一個pointer這些方式的所謂的dynamic variable就會放在heap，所以其實那是另外一個空間，所以大家寫程式不要只是說create variable你要清楚的知道你的variable是放在哪一個裡面，因為它的定義管理方式是不同的

好，那有了這些空間之外我們的process除了memory裡面放的之外，它當然還需要一些metadata就是管理這個process的資料，那最重要的就是program counter也就我們知道了它目前執行在哪邊，另外也包括了register的counter也就是我們這個執行過程中會用到register嗎可是這些register呢並不可能永遠都使用register因為我們程式CPU是很多程

式在共用的所以當你被switch被換走的時候我們後面會講那你register content就必須要把它擠下來讓出來所以你這個也是需要記起來的那最後就是很多resource就是你開file啊或者是這些使用電腦系統上的resource的時候它會需要一個token一樣或者是就像一個這個 reference 一樣所以他知道你開了哪些 file或是比如說開了多少用了多少 socket port 等等這些東西這個就是 resource 的狀態好那我們今天就只能講到這邊.