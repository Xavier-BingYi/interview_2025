undefined
那接下來Disk這邊我們再介紹一些跟Disk Management相關的一些議題像Formatting、Booting對不對還有像如果有這個詞區壞掉的時候到底會怎麼處理的然後最後我們提到Memory的管理有用到Swap嘛對不对是在存在硬碟上的所以Swap Space跟硬碟管理之間的關係又會是什麼好首先Disk這邊的Formatting因為我們知道File System有在做 Formatting那其實Disk這個Hardware它也有在Formatting就是說其實你要在Format你的這個File System之前

我們知道第一個你會去做partitioning partition其實它本身就是在做一個low level的formatting就是去把這個這個最最這個一開始硬碟的這個空間的規劃也要把它做一個formatting的動作那簡單來講就是建立這些sectors所以我們的這個第一個你要上去去擺資料我們知道先有sector嘛對不对然後才能夠去放data的block所以這一層下面這一層

就稱之為所謂的low level的formatting所以建立這個sector就是大家知道就是其實這個sector裡面為了要去能夠detect它的錯誤至少在硬碟這邊大部分的story system都會本身加上這個arrow collection code就是它至少要能夠detect到這裡面是不是有錯誤發生它不一定能夠把它給修正，但至少要能夠去detect它是不是正確所以通常會有一個header

然後一個data然後才是trailer的部分那裡面在存的是這個sector的number還有就是它的arrow的correction code所以如果你花了很多的bit在裡面你甚至於可以去把它做correction那如果你用的bit比較少那你至少可以去detect它是不是有問題比如說你用一個pirated bit對不對就知道是不是01的數量是不是正確那所以通常這會浪費掉一些空間的，

但是我們俗稱的這個sector的大小是不去考慮這兩個其實指的就專存的是data area就是你實際上可以存的空間的大小那所以這個low-level的formatting做完之後其實就是你買來的那顆硬碟所以我們知道買來硬碟就可以開始趁機灌檔案系統可以開始使用對不對所以我們之前教的這個partitioning還有這個file system的formatting其實是在這個之後因為你已經有sector number了嗎？然後，我們的OS再來接手去管理，看要怎麼樣

去使用這些sector，所以才會去做這些partitioning還有formatting就是logical level的formatting的動作那-booting這邊的話，我們知道，就是因為要boot起來，你必須要有code，那這些code當然是放在硬碟我們知道，因為最後只有硬碟的東西會存在，所有都是從硬碟露出來的。但是我們又知道，如果你要這些檔案，如果放在檔案系統裡的話，其實你很難去把資料取出來，因為如果你沒有把你的file system整個架起來，你根本沒辦法透過file system讀資料對不對，所以-booting這邊，實它是不只是

當然最複雜的code， eventually是放在file system，但是很多boot code咧他是直接就當作raw data的形式然後放在我們的硬碟上面那，所以為了booting，我們知道當然你需要一個program就是最最一開始的那個通常叫做bootstrap，就是一開始的那個program，然後他就是做非常基本的code，就是去initialize 我們的CPU register Memory這些對不对，所以知道到底有哪些hardware的resource，這是最最最

基本的這個code不停的code的部分那所以這些code的擺放一部分它會擺在這個ROM的部分也就是我們的motherboard所以你在開機嘛所以這個motherboard上面它本身就會燒了部分的這部分的code然後另外一部分的code就是當你要去控制你到底是用什麼樣的檔案系統什麼樣的作業系統等等的時候對不

對所以另外一部分的code就必須要放在我們的disk上面比較更複雜然後是使用者去重新去灌這些軟體之後系統的軟體的時候的這一個部分後面的booting的code就會把它放在我們的disk所以我們就知道有放這段code的disk我們就成為是個system drive或者說boot disk就是那個可以開機的這個磁

區啦所以這個是特別拿來開機用的話你就必須就意思就是它前面其實會有之前我們介紹過的一段code一段空間來存這個code那這段空間我們就稱為boot block嘛對不對所以你如果是拿來開機用的硬碟就會有一個boot block那讓上面就是存的就是booting要用到的其他的程式嘛根本不需要file system involved

所以是非常非常基本的簡單的code在前面好那後面就是我們之前在講file system有時候介紹過對不對所以前面就是我們的這個boot code的部分然後呢boot code裡面就會有partition所以這個partition裡面就會當然就是存著剩下我們OS存在檔案系統的那些資料所以它會給load partitionload partition之後裡面當然就是我們知道的有file system所以你就可以開始load file system裡面的

作業系統的程式所以整個過程就是基本上可以看見第一個其實是是在我們的motherboard上面的ROM最基本很general的那些code然後起來之後他就會先去找你是哪一個硬碟是上面是存OS你要用那個開機所以大家知道你一開機如果你灌了很多作業系統你可以選對不對他為什麼知道因為其實第一段code他就已經去detect這些

NBR就是這些booting的block然後看裡面的code他就知道我有哪個OS裝在上面你要用哪一個來開機那你選了之後他就會繼續讀裡面的開機的程式碼然後把他的file system露起來然後露起來之後就可以去讀裡面的檔案系統的這些作業系統程式碼然後繼續完成後面的動作所以就是這樣的一個流程所以其實前面這個boot code的部分他就是直接存在disk上了

好那第三個議題就是壞軌了怎麼辦對不對所以硬碟這邊另外一個常見碰到的就是常常我們會有壞軌的問題資料遺失對不對那所以壞軌資料壞軌的這件問題在硬碟這邊的管理的話基本分成兩種第一種就是很Simple的Disk Drive，所以這Depends on你的Disk的Controller或是Disk它到底是比較新的比較昂貴然

後，但是它比較intelligent就是有計算能力的還是比較傳統的這種IDE就是它是很基本的Control然後沒有太強的計算能力所以比較早期的IDE就是所謂這種Simple Disk就是它如果壞掉它每一個這個Sector有ECE對不對所以它要知道Arrow的這個Detection它可以知道那它就可以把它mark起來跟你講這個就是壞櫃了資料就

是遺失了或是能夠重建它當然幫你重建不行它當然就是直接就是遺失然後呢就把它mark起來它能夠做的事情就是只是把它mark起來然後以後不要再去使用它了因為就是已經壞了所以這是沒有任何處理機制的方式就對了那對於上面軟體有什麼影響當然它都不管所以你可能資料就遺失甚至於系統就開不了機就是會這樣子

第二種部分呢就是我們現在看到其實現在比較新的比較少的我們知道它就是所謂的這種用這種這個SCSI的這種這種不同的方式的controller比較新的做法是什麼意思呢，就是它的controller不只是知道它哪裡壞掉而且它會想辦法讓失去掉的這個sector能夠重新的來使用那使用的方式是什麽呢爲什麽

他可以把它給重新的把遺失掉的這個Sector把它補回來的方式基本上有兩種所以這個Forwarding是Remap，所以就是今天如果Sector這個4壞掉那最後面有個空的位置的話，那Spreading他就會把後面的空位置當作Sector4來用，所以很快瞬間就可以把這個問題解決，就是你遺失了，我就在後面找到位置把它補上就好，但

是physically它的位置其實不再連續了，logical的sector number可能是連續，但是physically的position不連續，所以當你在做disscheduling還有上面這些decision的時候，那它的performance就會受到很大的影響，因為實際上它不連續了，所以磁頭移動的位置就會軟掉那，如果你要解決這個問題的話，另外一個做法就是slipping，意思就是像我們剛才說的，就要shift

所以就必須要把所有資料都做搬動所以4的位置空掉了，那原來5的位置呢就要把它重新label成sector4以此類推，就是大家往後移一格就對了，但是這個代價很高，因為你搬動所有的資料嘛對不對，但是這麼做之後你的這些讀取的這些效能才會變得比較好所以有時候你發現在修補的時候就會有，

如果用這個方式它可能修補的時間會很長，但是修補完之後你的硬碟的讀取的效能才會變得比較好那不管怎麼樣這兩種做法啦都只有在這一種比較聰明或是這種計算能力比較高的這一種controller才會去幫忙的那如果是前面symbol那基本上你的儲存空間就直接就越來越少就對了好那最後

一個是這個Swap的部分我們知道Disk也拿來做Swap的管理對不對就是Memory的這些Virtual的Memory把它Swap之後其實會放到所謂的Swap Space，那這個就是放在硬碟的空間那這裡要提醒大家的重點是這個空間的管理在現在作業系統上基本上分成兩種第一種就是你就把它當作這個檔案系統的一個檔案來做

管理所以就是一個File就對了然後就透過因為它是檔案嘛，所以你就透過File System來存取這些內容存在硬碟的內容那另外一種做法就是我們之前說其實大部分人可能會選擇這個做法就是你直接切一塊RAW Partition不用File System了就直接去使用這個空間OS自己Memory Management的系統自己來管理這塊空間的使

用方法，這是第二種方式那，这就是所謂Separate的一個Partition來做管理，那這兩個差別在於說，如果是這一個做法，一般的現在灌的話灌OS，你都會用這種做法原因是因為它會比較快對不對，因為你不用透過File System嘛，而且每個Page我們知道它的大小不固定，就4KB嘛，所以你可以Implement非常簡單的很快的就可以

去access這些data然後也不用透过别的这些process或软体就是会变得很多浪费很多时间，但是它的缺点也很明顯，就是因为它是独立的对不对，因为它不是file system所以你是独立的保留一块this的partition，所以当你一开始在惯制作业系统的时候，如果你的swa space切得太小很抱歉，你就变得很复杂，因为你已经切了嘛，

所以我們知道你就必須要把這個partition要重新resize等等的話其實之後要花的精力是非常大的也就是它的大小是固定的或者說你一開始切的刷子切得太大那你的能夠拿來存檔案的空間當然就相對被壓縮了对不对，所以因為它是separate的physically可以切成兩大塊不同的管理所以当你想要調整它的空間使用的時候，那就會變得很麻煩，

所以這是為什麼很多作業系統也會捨破用File System的方式，因為它雖然很慢比較慢吧，但是其實它因為File跟SwapSpace你都是透過檔案系統管理，所以實你的空間可以全部切給檔案系統然後就看你Swap要用到多少這個空間它再拿去用就好所以就很有彈性，所以事實上現在大部分作業系統是兩者都採用就你會發現你灌系統的時候它就會

先叫你切出一個Swap Space當Swap Space用完不夠的時候他會再跟檔案系統借空間然後去存但是當然就會慢一點所以就結合兩者的好處來提供這個Swap Space的空間好那另外一個相關的議題就是Swap Space什麼時候我們要去哪些資料在什麼時間點我們開始要把它放到Swap Space因為Swap Space畢竟也是發那邊的話第一個

是比較慢第二個是它畢竟是個空間嘛所以如果你能夠存越少資料越好因為當SwaSpace也滿的時候你的系統可能就是直接crash掉了很多時候所以能夠怎麼樣有效應用它其實也是有一些方式的那第一個的話就是最傳統的我們知道的反正你有Memory上有任何的Memory content我們就先把它copy一份放在SwaSpace對不對當作它的

Backup放在那裡不管裡面的內容是一樣的不一樣的或是有需要沒需要我們就全部都有一份只要漏到Memory我們就把它放一份再刷Space那結果當然就是會造成比較大空間的浪費對不對所以第二種做法就是所謂的當你只有在你的這個漏進去的Memory要把它被刷所以你當你漏到Memory的時候你先不

用急著放一份在Disk的Swap Space上因為反正Memory有一份Copy嘛對不對所以只有當你的這個Page它要被Swap的時候Memory放不下了你要放到這個硬碟上的時候這個時候它才去做Copy所以這樣做的話當然就可以比較節省一些空間那除此之外你會看見像有些作業系統它再進一步去減少的就是像是我們Code的部分對不对

所以像是Code它反正其實本來就是一個Binary File嘛它本來就放在檔案系統裡面啊對不对所以當這些你的CodeBinary File的這些Code被Swap的時候它甚至於就不用放在Swap Space了因為檔案系統有一份了所以這些Text Segment這些Code Segment的Code被Swap的時候我就直接把它丟掉就好了要需要的話我就重新回到它的File Systemload 它 binary code

裡面的資料所以這就是可以節省一些空間的方式那第二個部分呢就是只去存這些 runtime 對不对所以你這些 runtime動態產生的 memory像是 stack 啊或者 heap 的 memory只有當這些動態產生的 memory它被 swap 的時候我們才把它放到 swap space那所以這些 static什麼是叫 static 就是像 code 對不對這種本來你就是從檔案系統露出來的這些資料我們就不要去存它了所以用這樣的方式就可以

減少一些第一種方式是一開始create的時候它就會去把它放到我們的memory放在memory 的時候我們就copy一份放到disk裡面去然後呢不管是什麼樣的content我們都有一份copy所以很浪費空間對不对那第二種方式的話就是我們要盡量去減少它swap space 的使用方式第一個就是code 的這些反正不會動的程式碼我們就不要放到 swap

了就像剛才說的其實只要從它的 file system binary code 露出來就好那如果是這些 runtime 產生的這些我們才會放進去所以這兩者是同一件事情啦只放動態的然後不放 static 的那這個呢是我們剛才講的就是除此之外這些動態的部分如果是它剛create的時候我們先不要把它copy一份放在我們的swap上面去只有當動態的而且它被page out的時候

我們才會把它放到swap space去所以這樣的話就可以minimum只有唯一需要的我們才會放到swap其他的話基本上就可以把它省掉了，所以這兩個差別就只是說這是creation time的時候不要去做一份copy，只有在page out才做copy然後這些version的話這個話不管是只要是text的話，你根本不管是creation time或是page out time，你都不需要去存它，只有動態的你才有在page out的時候

要去存它那所以跟以前，不管是什麼data然後，一create的時候我們就把它create出來當然就可以減少掉很多的空間，那SwaSpace的管理其實我們在檔案系統那邊也看過了，實用這個很簡單的把它，如果是自己用一個Row Partition管理為什麼可以這麼快就是它Size都固定嘛，所以我們其實就是用可以用一個簡單的Array對不對去存每一個Swap的這個出來的Page的空間，它到底是存哪一個Process的第幾個Page就好所以你只需要一個Integer你就可以

知道到底哪一些Swap Space是空的然後使用的人到底是誰然後勒因為什麼時候 swap 要被回收勒就是 depends 什麼時候這個 page 裡面這個 page 沒有人要 access 對不對所以我們只要存一個 counter 對不对，所以他就知道到底哪些空間是可以被清掉的因為當你的 process 一離開你不要那個 page 了那他的 counter 就可以減一嘛那當到 0 的時候他就知道這一個空間沒有人要使用了所以你就可以去拿去存放其他人的 page

所以簡單來講就只要用一個Count來記錄哪一些Swap的空間有存Page是存哪一個Page然後被多少個Process在Access它有Reference到就可以了所以它的管理就我們說非常的簡單所以不需要透過File System就可以很容易的去管理的好那最後我們要講的是RAID所以這個還蠻重要的所以什麼是RAID第一個

RAID其實是一種storage system那會產生出這種storage system最主要原因就是第一個我們可以看見的是這些硬體的價格都是越來越便宜我們知道的嘛對不對所謂的便宜是指的是每單位就是每單位儲存空間的錢所以你會覺得硬碟好像都是這麼貴可是那是因為你會發現它的size其實越來越大所以如果你算成每單位的話其實它儲存的價格是越來越低廉的

那不管是剛才看到的MEMORY更重要的就是我們這邊要講的DISC其實都是有一樣的現象就是越來越便宜所以既然它越來越便宜的話的一個想法就是我們是不是有可能透過很多個比較便宜的DISC所謂便宜就是它比較容易壞或是說它的效能比較差的這些硬碟把它兜在一起之後，然後讓它變成跟一個價格很昂貴的硬碟

可以達到相同的可靠度或者是效能。就是把很多很便宜比較差的硬碟集合在一起，然後 deliver一樣甚至於更好的一個結果，所以 RAID的意思就是這個 Redundant Arrays of Inexpensive Disks 对不对。所以，你用很多的很便宜的硬碟然後把它兜起來是一種 Storage System 好，那最主要的目的其實就兩個我們大家看見的一直會圍繞在這兩個 issue上第一個，

我們把它兜起來之後，怎麼樣可以讓它變得比較 reliable也就是資料比較不會遺失那可以比較不會遺失的原因就是因為，因為比較多硬碟嘛，有比較多空間所以你可以把資料做備份，所以很多硬碟同時壞掉的機率當然是更小的對不对第二個的概念就是performance就是效能讀取的速度那為什麼速度可以透過很多硬碟增加咧就是因為，你有平行度嘛，对不对。

所以，你一顆硬碟，它的頻寬現在可能就100到150 MBps那你兩顆硬碟一起讀你的效能不就兩倍了嗎，对不对，所以當你有很多硬碟的時候，你就可以透過這種很簡單的方式去實現這些很重要的目標好，那所以我們大家看見的基本上，這種兩種方式他用了很多硬碟的，不外乎其實就這三個原則第一個就是striping就是把你的資料把它切割之後放到很多硬碟上所以你可以

有平行度的事情。第二件事情叫做Mirror或是你叫做Replicar對不對，就是把資料備份所以更可靠第三件事情呢就是有點像我們儲存上都會用到的Coding對不對，都會去做Correction Code對不对，所以可以真去產生一些redundant的code或是data然後用來去做arrow的detection或者甚至於去給把它給修補修正的動作那你產生多的資料沒有關係因為其實你有多的空間嘛所以你就可以實現這個目的好。那我想我們就先休息十分鐘，那回來我們就來介紹各式各樣不同的 RAID那怎麼樣透過這三種技巧實現我們的目的。.