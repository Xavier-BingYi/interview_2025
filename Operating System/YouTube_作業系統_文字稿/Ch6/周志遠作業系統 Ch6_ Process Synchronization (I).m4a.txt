undefined
好，那今天的重點就是Monitor所以我們Synchronization的Tool講到了最後一個Tool是所謂的High Level Language一個Construct就是更High Level更方便這個Programming所使用的一個Synchronization的Tool就叫做Monitor那我們提到這個Monitor其實就是有點像OO的概念的衍生出來的一個Tool也就是說我們把跟它其實就像你可以先講成就像一般OO裡面的Class一樣所以我們知道一個Class就有它的這個Private對不對的Variable然後還有它的Matter然後這些Matter

通常就是拿來操作修改access這些local variable或是private variable對不對這個object的這個variable的這些方法所以我們就可以基本上你就可以知道誰會去access到這些variable然後會做什麼樣的動作你其實都可以透過class這樣OO的概念把它will define出來所以OO是一個非常我們都知道就是大家會比較希望這樣的style去寫program的原因就是它很清楚

這個Monica就是在OO這樣的概念下去做個衍生就是要解決說大家透過這個method去這些同一個object然後就透過這些不同的method去access這個shear的這個variable的時候的synchronization的問題解的話就回到一開始我們always在講的解決synchronization最簡單的方式就是mutually exclusive所以這個class by default它裡面的master的一

個特性就是它一次只有一個被執行所以你有很多的threadsactive的threads去call這個object的master可是它會把它cue住然後排隊一次一個人進來執行所以這樣子當然就有mature exclusive的這個特性了對不對因此就不可能就可以把synchronization的問題給解決了你就不會有race condition就是這個樣子的一個概念而

已那稍微再仔細一點大家常常會忽略掉的一個事情就是當我們說一次一個的時候並不是說一次其實並不是我們大家只有例子並不是說一次只有一個人在call這個method而是說只有一個active的這個執行序process或thread在執行這個method也就是說我們大家有看見其實之前大家看condition variable Pthread的例子就有注意到了你就有可能

進到一個critical section之後卻在裡面去做wait的動作對不對，所以當你call wait的時候它叫做inactive因為它其實已經被put to sleep了嘛，它不能執行，所以它雖然是在這個class這個object裡面執行到一半，但是它有可能因為這種wait或是其他這些動作變成把它暫時的suspend的話，那這個時候是可以讓其他的thread進來繼續使用的，因為只要

維持是一個active的這個條件就可以了，所以並不是說不能有同時很多人call而是說必須只有一個人是active這件事情所以重點是active的意思就是說它可以去execute裡面的instruction或是執行裡面的statement這件事情所以重點是它guarantee只有一個一個process是active在這個monitor也就是在這個class定義的object裡面在運作，所以才會

把Active這個字要特別特別的強調，是指的是這個才是真正的必要的條件好，那你可以看見這是一樣，這跟Condition Variable或者說我們說的Mutate這些一樣就它是一個概念或者說Critical Section這是一個概念那當然它就會用不同的形式在我們的Programming的Language裡面被呈現出來，那因為這是非常General tool所以你會看見大部分的這些平行的語言或者是 Java非常物件導向的這些語言它就都會 support

這樣子形式上我們等一下會看到例子當然形式上有一些變異不太一樣的甚至於更 general，但原則上它的概念就是這個monitor 的概念就是把它用這個 method 的方式用一個物件的方式然後去 control 它的這些 method來做 synchronization 的事情所以我們說high level，因為它已經是融入到你整個語言的設計當中了，所以它是一個

specialized class，所以到底什麼是monitor，看這個圖就應該非常非常清楚，所以右邊這個圖這個就是一個class所create出來的一個object，它就負責幫我們去處理這個synchronization的問題裡面就像我們剛才說的會有所謂的shared data，那對應到的呢就是這個class裡面的這個private的這個variable，所以只有這個class我們大家都知道OO裡面就是這樣，只有透過method才能夠去操作，那programmer他就可以

很清楚的去把所有的method對 operation怎麼樣去essence他怎麼樣去修改他這些動作全部把它define出來所以不會有外面的不會受到其他人的影響或干擾全部都是在你可以control的這個機制下然後呢為了讓他可以去解決這個shared data的risk condition這個issue所以我們就說這是一個special的monitor class因為所有去call這些method這些thread也好processor也好對不對

這些他會被擋住他會去這個language本身知道他是一個monitor所以他會去把他cue住一次只有一個人可以進來所以就可以保護我們的shared data了這樣的概念就是所謂的Monitor所以大家可以看到它就更High Level而且不像之前我們教的這個Semaphore或是Mutex或甚至Condition Variable你要自己在那邊Signal Wait有沒有然後順序如果錯了Lock Unlock你都要自己Programmer要去Figure out就很不明確加在哪一行我們常常是說往前一行往後一行答案就不一樣有時候會Deadlock

有時候根本就沒有還是會造成 raise condition所以就非常的比較 low level但是可能比較快 OS 是這樣但可能就不太好 programming常常會有 programming error對不對不小心的一些錯誤然後就在那邊一直 debugging大家最怕的好那所以呢monitor 這樣子的一個 tool 裡面它也結合了 condition variable所以我們教過 condition variable 對不對所以它並不是condition variable並不是拿來解決raise condition但是它是拿來做synchronization非常常用的那所以在monitor的這個概念下也可以

跟condition variable做一個結合那它的結合的方式就跟這種介紹的非常像也就是說其實你可以在monitor裡面就是你開開monitor定義的master裡面你還可以去callcondition你可以去createcondition variable然後去callcondition variable的wait讓它去在裡面做一個等待的動作所以像我們之前那個Thread Pool大家還記得那個例子就是很符

合你也可以用Monitor的概念去寫應該也是可以的所以一樣這邊的定義是一樣的所以我們都知道Cond ition Variable其實就是一堆Variable那這些Variable其實每一個就代表一個Individual的一個Waiting的QueueEvent的Waiting Queue；然後我們也都知道它就是透過Wait跟Signal所以這是一樣的因為就是Condition Variable的定義來去做Synchronization；所以你要去等一個

resource你就call wait，你要去wake up一個人你就call signal，那你要depend on你的condition variable是誰，所以會不同的variable那就是不同的waiting queue了好所以一樣wait的意思就是suspend所以我們才說你在monitor裡面其實你是有可能會被suspend的；那最常的原因就是因為你跟condition variable的結合，那你一call wait你就被suspend就會變成所謂的inactive這個時候其實雖

然說你在monitor你在裡面，但是外面的thread就可以開始進就可以進來了，因為裡頭沒有任何active的thread在裡頭了；所以wait的目的就是可以讓他在裡面做一個等待，然後當然signal就我們知道的他就會去把他叫起來就看這個variable他的waiting list裡面有沒有人有的話就把他叫起來那這裡因為我們前面已經教過了Semaphore對不對

因為也有Signal跟Weight所以這裡就提醒大家一下Condition Variable的Signal跟Weight跟Semaphore的Signal跟Weight最大的差別在哪裡呢在於Semaphore的話大家還記得的話只要是Weight它就會把那個值做一個減一的動作只要是Signal它就把那個Counter做加一它就在那邊減一加一就對了你只要扣幾次Signal它就把那個值加多少

他會一直加上去一直減下去所以programmer again要負責加減最後的結果是正確的不會多加或多減因為其實你control resource應該是有限的但那都是programmer要負責的那在condition variable的不一樣的地方在於condition variable的概念不是一個counter而是一個waiting queue所以當我們說wait的時候是指我們要去拿那個resource如果沒有

沒有這個如果我們說wait的時候並不是拿一個resource應該說wait的時候就是我們等於是把這個process這個thread放到queue裡面waiting queue把它suspect把它放到waiting queue；然後呢synchronal的意思就是我在做dequeue所以比較像是in queue跟dequeue，而不是counter的加減那這樣的差別你就會發現因此synchronal的時候如果今天我們queue是空的你做dequeue會怎麼樣

不會怎麼樣對不對就是沒有事情發生其實就是沒有人被叫起來它會繼續的運作那你的Q仍然是空的沒有所謂-1Q這個概念沒有這個東西它0就是0了所以說signal它如果裡面Q是空的話是沒有人會被叫起來的可是如果是semaphore你的值是0你繼續在那邊去call signal的話那它的這個繼續再去call

wait或signal它的值可以是負的也可以是正的可以是任何值沒有一個限制它就是會把那個counter做夾或剪的動作所以這是差別所以signal如果重要就是如果Q是空的你去做signal其實是nothing happened就這樣子可是如果是semaphore的話它的值就是always會被修改這是最大的差別一個是Q一個是counter所以這個就是我們

可以看見我們把monitor跟condition variable結合在一起的話，那就變成這樣稍微複雜一點的structure所以說其實我們進來的這些thread它有可能會去call condition variable的wait那就會被放到這些waiting queue裡面每一個variable就是一個waiting list，一旦被放進來就代表它是inactive，所以別的thread就可以進來去執行那因此才有機會去call signal，然後把別人給叫起來那就是我們之前看到Pthread的例子是完全相同的所以就是這樣子

去做運作，所以有可能會有很多thread所以看到重點是monitor裡面其實是可以有同時有很多個thread存在，但是active的只有一個，所以並不是說monitor只能有一個thread，這句話就是錯的是只有一個active的thread，所以細節但是非常重要天差地遠好那知道了這個monitor的這個概念之後我們接下來就來看怎麼用monitor來解這個dying philosopher的問題，希望大家還記得簡單來講，就是你有N個人然後他們要用餐用餐需要兩根筷子，所以筷子就放在每一個人的正中間，

所以這個問題的難處就在於如果沒有Synchron化大家可能同時拿起左邊的筷子再拿起右邊，你就會發現有Deadlock然後大家都在互相的等對方，然後就永遠沒辦法結束所以這是一個Synchronization的問題好，那這個問題描述就比較複雜了對不對，所以我們就看我們只能用Monitor以O-O的概念，我們把這些method把它定義出來之後

就比較容易去解它了，而不用去想什麼東西是會造成Risk Condition什麼不會，那個太Low Level了對不對好，所以用Monitor解法，我們就第一個就是用Monitor這個Class假設我們就是去Create一個Monitor出來，那裡面會用到的幾個變數去描述這整個問題的，你可以看見第一個就是這個State像我們這個例子就只有五個人而已，所

以State其實這個Array就是在記錄每一個人目前的狀態是什麼，所以我們知道他的狀態就是三個Thinking意思就是說他現在是這個只是在Thinking了，只是在Thinking了就沒做事啦沒有要吃的意思啦，就在那邊idol就對了Hungry意思就是說他要吃了，但他現在還沒有拿到筷子，所以他還沒辦法吃，所以他在等了Eating當然就是他手上有筷子的意思，而且

是指的是左邊跟右邊的筷子都在他手上，所以這個解這個solution包括了你也不能憑空蹦出來更多的筷子，這也不合理嘛對不對所以筷子就是五個就是五個，你也不能寫錯的。 synchronization就是你會發現跑一跑怎麼沒問題大家都吃到了，有十根筷子不行，所以 eating就是指左邊右邊筷子都被這個人給拿住了，那五個所以就是每一個人當然我們就可以知道了這樣，我們才可以

有點像我們之前的Solution還記得這些Software的Synchronization Solution也是同樣的概念就是我們可以先用這些一個Global Share的Variable去讓大家知道看見對方的狀態是什麼，那會比較好解稍微差一點就是差過度一點，這個是補充而已就是這個Synchronization的問題，如果是這種可以看見別人的通常都還叫做好解的問題因為你知道Global

Information，那這個領域或是這些Stigmatization最難的其實真的碰到難的地方是在於你看不見別人的State就是Fully Distributed完全就是Localized Information的話，你還要能夠解得出這個問題這就難上一層了所以你會發現我們的Solution這邊介紹課長介紹都是這種你可以看到別人State這個其實是已經是很大的一個ass假設很多真實問題你根本就不知道別人狀態是什麼

你還要能解那個就真的更難了好。任何way這邊是比較我們就是假設反正就想要這個信息我們就把它就有就對了只要這個state本身它沒有它不會產生race condition就好。這要check喔因為它是share的一個information對不對所以你要注意到本身這個值在做修改的時候會不會造成問題那會不會造成問題最好的

判斷就是誰會對他做write的動作如果說只有一個人會對他做修改其他人只是read only他不會產生raise condition這是基本原則。然而，如果兩個以上的人對他做修改這個就代表他本身也要做保護所以大家應該還記得前面我們講first read writer的counter的部分所以這樣就會注意到什麼時候要保護什麼時候不要好那接下來

呢我們會有這個self這個就是condition variable了。所以這個我們就會需要了所以我們大家就會看見最主要原因就是因為當我們知道有一個人他想要吃所以他在hungry了。但是他拿不到筷子的時候那怎麼辦我們就等嘛。所以我們就可以把condition variable這個東西拿來用去代表他在等的這個動作然後把它放到他的queue裡面去，那你可以看這一樣是五個，所以其實每一個人就是自己是一個獨立的queue。

那我們大概就看見它就是可以去指定對某一個人做wait跟signal的動作所以我們其實是五個queue，每一個人就是自己一個queue這樣子好那接下來OO嘛所以你可以發現我們這整個問題裡面會有哪些動作對不對，所以可以看到的話呢可以把它切成pick up, pull down所以I是指的就是DI一個人的意思對不對所以就是DI這個人他去做pick up的動作

或者這個人去做普通的動作那除了這兩個必要的這個method之外我們會多加一個叫做test就是try to eat所以我們在這個去吃之前我們必須要去試試看到底我們現在是不是可以去吃也就是說左邊跟右邊的筷子現在是不是都沒有人用所以我們會再多加一個method專門去做這個檢查好好然後最後當然是 initialization 對不對

所以當然一開始的 state 就是 thinking所以大家都沒有在做就對了然後就只是這樣而已那這樣子我們就完成了一個monitor它裡面該有的 methodinitialization 的一開始的 function還有它的變數的部分好那我們就接下來當然就是那三個function那三個method到底該怎麼寫的問題了那所以就可以看見首先是pick up所

以當一個你可以就想整個問題的描述寫program就是這樣把人的思路轉換成程式碼而已那eating your eye所以意思就是說這個function就是假設i這個人要去吃了所以吃的時候吃之前他一定會去call pick up代表他要吃東西既然他call pick up就代表他hungry嘛所以他才會去call這個function對不對所以我們就把

他的state就要去轉換成hungry那hungry他要吃之前就要我們說必須要先test因為如果他不做任何測試他就很盲目的把筷子給拿走的話一定會卡住所以他就要去call test這個function去看看現在是不是可以做這件事情那什麼是test我們把它切開來等一下再來看好那Test完之後我們就等下才解

釋Test所以Test完之後其實他會在裡面去修改他的State看看到底是成功還是失敗就對了這個Try的結果那所以Try的結果如果不等於Eating那就代表他失敗嘛對不對那失敗的話怎麼辦你又想吃啊所以就必須要Wait這應該沒問題就沒辦法那我怎麼辦我就把它放到Waiting List等著你的旁邊的人去告訴他

所以這個 strategy這個整個做法就是我就把我自己先把它 suspend 掉，然後等到旁邊把筷子放下的時候，他會去叫我起來，說你可以看看，你可不可以吃了，但不代表被叫醒的人一定可以吃喔，因為可能隔壁的鄰居又把你筷子搶走，所以其實是兩個人都要檢查對不對。 Anyway，所以這個如果 test 結果失敗，那就代表他沒成功，那就要去等了好，然後等著被叫起來，然後再去試試看

好，那 pull down就反過來了嘛，所以 pull down就是說，不管原來是什麼狀態，如果扣 pull down那就是我把它放下來，所以就把它變成 sinking 对不對。那把它放下來，這就是重點了對不對。所以這兩個人其實要搭配，因為就像我們剛才說的概念是，當我們筷子沒有的時候，我會等，那我等到什麼時候呢，就是跟我鄰居把我叫起來，所以什麼時候我的鄰居會叫我就是我的隔壁的人，他吃完把筷子放下，就代表

你的鄰居有機會吃了對不對，因此我們就會去call這個test可是要注意到，我們是i加4跟i加1意思就是左邊跟右邊，一共只有五個人啦，所以還有 mother5這大家都知道了所以就是左邊跟右邊的 ID，把它放進去 test。所以這等於是有點像我吃完了，那我就邀請邀左邊的人，問跟他講說，你來試試看是不是你可以去吃，然後

跟右邊的也講一下，因為我是兩隻筷子嘛，所以當然左邊右邊好 很好那當然測試的結果跟這個PUT_DOWN這個人沒有關係，反正他就是吃完，只是看左邊右邊會不會受到影響而已好。 那最後咧最重要的這一塊就是TEST，所以TEST到底在幹嘛你可以看見當然就是他在TEST某一個人，但不要忘記喔，TEST這個CODE這個人

不一定是CALL這個FUNCTION的人，因為你可以看見那個是左邊跟右邊喔，像這邊是自己對不對所以我PICK UP的時候我會去TEST我自己可是我PULL DOWN的時候我是測試的是左邊跟右邊的人，所以被測試的人不一定是ACTIVE的THREAD喔注意到，因為ACTIVE就是正在執行的那個嘛，所以當然這個他本身is ACTIVE可是他摳的左

邊右邊有可能是之前被SUSPEND的THREAD但是他還是可以去幫他做測試好，那TEST怎麼樣他重點就是他想要看他這個人是不是真的可以做吃的這個動作就對了，那怎麼樣子他可以去吃呢很簡單我們知道他的問題的定義就是左邊的人如果不再吃還有右邊的人也不再吃的話就代表筷子沒有被拿

起來嘛對不對所以只要狀態不是吃的意思就是那個人他手上沒有筷子在我們的整個問題定義裡，所以我們去問這個左邊的人他的狀態不是吃那代表他手上沒筷子然後又問了右邊的人他的狀態也不是吃代表他手上也沒筷子那如果兩個人手上左邊右邊都沒筷子意思代表我可以吃了嘛，对不对，所以

那還有一點在有筷子還有一點不是只要有筷子就代表我一定是要開始吃東西喔，所以你還要看你自己到底是不是要吃東西的人，那為什麼會有這個condition就是 AGAIN不要忘記他可能是幫別人做testing，所以三個人放下之後他再叫四個人測試那四個人有可能餓有可能不餓啊，对不对就算有筷子也不知道他要吃嘛，对不对

所以還要再多加第三個condition就是這個人他真的也就是想要吃的那個人，那這樣的話就代表這個test的結果意義就是I這個人他真的要開始吃了而且他可以吃了所以他既然想要他想吃而且他可以吃，所以我們就會把他的stay換成eating，对不对，所以代表他終於就可以順利的去吃然後呢更重要的是你還要再加上一個signal

為什麼，因為 AGAIN這個其實是幫你的鄰居做測試所以你的鄰居你發現你的鄰居其實可以吃了之後你的鄰居要把他給wake up起來因為他有可能是當初在等的對不对，那在等的意思是他其實在waiting queue他沒有辦法執行他的動作所以他可以eating之後他就要去signal去把他叫起來然後看他這個叫起來之後當然你可以想見他如果真的是在等的人就會接回到他

這個code這邊然後就會被wakeup起來然後就會完成他這時候他才能夠完成pickup的動作只要pickup就代表那個人真的可以開始吃的意思好那這就是我們剛才提到的如果這個queue是空的咧所以這也有可能說你去signal左邊的人可是他其實根本就沒有要他根本就沒有在waiting裡面所以Waiting list也有可能是空

的那你去把它Waiting起來的意義不就沒有了那事實上是沒有關係的因為這個Cue其實是空的也沒有任何影響意思就是說你左邊那個人可能他早就已經順利在此了那就不需要你去把它Wake up起來了所以Anyway你都可以去Call Sync其實沒有任何負面的影響只是去Make sure他如果他當初因為Synchronization的原因在Wait的話

他現在可以離開他的這個blockade的這個部分可以開始繼續進行那如果他本來就沒有被擋住你看起來好像一定會被擋住可是不一定因為context switch很複雜你知道所以你可以找到一個一個路線是剛好他一放下然後他才去測試然後他就可以吃這是有可能的所以有可能他根本沒有在wait但是也無所謂它還是可以不受影響本來沒被擋住的那你就繼續完成Pickup的動作就好好可以齁所以這樣子大家可以看就是把這三個function按照它的行為去把它描述出來之後就可以讓這整個問題把它解掉了.