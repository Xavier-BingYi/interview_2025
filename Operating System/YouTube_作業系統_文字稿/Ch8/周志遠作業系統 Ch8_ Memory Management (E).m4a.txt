undefined
接下來我們今天就要很重要就要講Page Table了，所以希望大家還記得我們講過這邊就是實際上我們為了增加我們的這個Memory的使用率不要浪費所以其實我們都是用所謂的discontinuous的allocation我們就希望有空間我們就能用不要有這些後在中間其中一個方式就是說是paging對不對，所以paging它就是我們俗稱這種fixed allocation的一種類型裡面的一種變形

那所謂的fixed的意思就是我們上次提到的在physical這邊還有logical這邊所謂logical則就是user的memory space program的memory space那這兩邊我都把它做fixed partition把它切成一樣大小完全剛好一樣大小的各個partition出來所以其實每個Program的Page數量會不同就Depends on這個Program長了多大所以我們說它會長嘛，那它就一直增加它Page的使用那

為什麼要兩邊都切勒就是因為我這樣就可以做任意的Mapping對不對，所以因此我就需要一個Table去做這個Mapping儲存這個Mapping的關係所以我才可以找得到嘛，那這個Data Structure我們就稱之為Page Table所謂的Page Table了好，那有很多好處。我們今天就會一一就會看見，所以概念上來講其實就像這樣對不對所以你可

以一個page你可以扣過這個table，我就可以找到他在存在physical裡的哪一個friend那他存的裡面東西他存的這邊寫是14,37啦，因為這是比較conceptually大家比較簡單很快就可以理解的嘛，第幾個friend number，但實際上在這個implementation的話，我們存的是base address，所以就是它的起始位置，所以可以看見，因為我們最後要翻譯的address對不對其實是這個它的這個我們說是它的這個實際上第幾個byte的這個位置所以我們其實需要存的是這個它的這個base的address好，

然後很重要的話就是每一個Process有自己的Page Table，所以是其實OS要maintain非常多的這個Page Table，就像每個Process你已經看見了為了管理Process一定要有Program的這個Process的Control Block對不对，還有需要Page Table，所以每個Process你說我們說在Load memory的時候要做很多事的，它要去Create的時候，在放到Ready Queue之前，你要做很多事什麼事就包括了要去Create它的

Process Control Block還有Create Page Table甚至於要把這些Memory要Allocate好嘛所以它才能Load到Memory裡頭去所以其實是很多事情要做的這才是Loader最主要要做的事情好那我們就來進入重點了到底怎麼做一個完整的Address Translation剛才只知道我可以做Mapping就對了但是我們的Program對不對CPU在Access我們的Memory的時候我們要知道它是所謂的byte addressing就是以byte為單位做addressing也就是像我們寄信要有email account的名字我們的

這個住家要有這個位置哪一個路幾號幾項幾項幾號等等所以在這個computer assistant世界裡面大部分都是用所謂的Byte Addressing就是每一次你就是只到一個Byte的位置因為我們知道還有Bit嘛所以系統通常不會到Bit的Level通常都是Byte AddressingBy default是這樣子那可是也要留意不是所有系統都是這樣喔一些系統他可以跟你說我的設計For some reason我是四個Byte的Addressing可以喔！意思是你每一次就是只挑四個Byte 四個Byte

所以還是要注意到沒有特別提醒就是 By Address所以是以 By 為單位，所以這個AddressLogical Address就是我們做 Program 裡面拿到的這些Address用 Bit 這個表示為單位的，那這些 Bit基本上我們等一下會看到例子就是這個Address 我們為了要去找到真正的 Physical 的位置我們會把它切成兩部分因為我們有paging的概念嘛 對不對所以前面的幾個bit我們會稱之為所謂的page number也就是它在第幾個page因為我們把它partitioned了嘛，所以你可以

想見我們一個address我們現在其實conceptually我們要去指定它的位置的話其實是先跟這個系統講我是在我Program裡面的第幾個page 對不對然後再去跟他講在這個page裡面我是在offset是這個page裡面的哪一個位置是一個相對的位置在這個page裡面，所以其實我們的address會分成P跟D就是重點要記這個page number的意思跟page offset的意思其實這兩塊數字加起來的

那這個P我們等一下就會看見它的目的就是去look up我們的page table因為它是第幾個page嘛所以我們想要知道它到底在第幾個frame對不對所以這個剛剛前面那個圖的例子一樣那這個bit我們之後會看見在這邊address translation你要非常留意的是這些bit它的長度的意義在整個系統裡面的意義是什麼所以以這個例子來講page number

它的bit比如說我們說page number如果有10個bit我來表示一個page number的話大家也知道其實它的數字意思就是可以到2的十次方對不對所以意思代表就是你可以這個program你最多你不管再怎麼寫你的address你最多是不是只能使用到2的N次方個pages對不對那我們剛才說了如果一個系統假如它page的size是4kb然後你這邊number是只有10個bit

其實你就可以算出來這一個程式最多最多它可以使用的記憶體空間是多少沒錯吧因為超過那個size你根本沒辦法描述對不對所以你其實根本就不可能用到那麼多的記憶體空間所以其實這兩個詞相乘就等於是限制住了一個program它的memory的可以allocate的size這也是為什麼在早期的電腦我們說是只有這個32bit的computer它的上面的程式最多只能 allocate4GB的memory大家去算一算就知道了其實是受限於這邊所以為什麼

你們這個年代可能沒有經歷過那時候其實從電腦從32bit降不到64bit我們稱之為所謂的千禧年的bug這到底在怎麼會這麼討厭就是因為這樣所有的addressing從16b變成32變64他所有的hardware這些全部都要去修改的不然他其實會有問題好那所以這個是number of bit的意義對於page number而言那page offset就剛才說的了所以他指的就是說我這個page的第幾個位置啊對不對所以你可以想見這個數字如果我們n我們說是這個page

offset它有多少個bit的話它的n次方意思就是page的size了嘛對不對因為你這就描述了最大的值就等於是這個page它最大的位置在哪裡嘛所以就等於是一個page的size是多少所以如果今天我告訴你說我們系統是這個page的size是4kb大家也知道就是2的12次方嘛對不對所以就代表我的address裡面我必須要留12個bit

去描述它所以你就知道它的page offset一定是12個bit裡面當然可以任何的指但它一定是12個bit因為它才會剛好指到一個4KB的page size的空間所以其實是這兩個部分把它結合在一起的，所以這兩個加起來就是我們俗稱的這個addressing那，這個是logical的，所以當我們變成physical的時候，因為你看見前面那張圖的例子嘛，所以說其實就等於就是我用 page number 對不對

去找到一個 friend number，然後咧把這個 friend 的它的 base address，這個 physical memory 的 base address，把它寫在前面，然後加上相同的 offset，因為 page 跟 friend 大小剛好一樣嘛，對不對，所以其實我們的 address translation就會看見就是這個樣子去替換掉它的找到他的friend的base address，然後加上他原來的offset就完成我們的address translation了好， 剛才這個描述太囉唆了，直接

看圖簡單一點大家就可以想像了，對不對，所以其實就像這樣子，對不对我們的address這邊可能有很多的bit， 64個bit現在的電腦早期就32個bit，我們就把它切前面一半的這些bit，我們就稱之為P，後面是D，所以這個切割的大小完全就control在這個系統，比如說，它的page size是多少對不对，所以我的page size如果大一點我D留的bit數要多一點，那我P的數字可能就要少一點對不對，

那所以用這樣，它其實不同的系統，它P跟D的bit的數量可以是不一樣的，但是是有意義的。那P的部分我們就會把它轉換成數字然後去找它在page table哪個entry然後我們說過裡面就會存了這個friend的base address對不對。我们就直接把它貼過來，然後b這邊就等於是大家知道，就直接用一個把它這個加在一起就好，其實這都是beat operation就可以

對不对。我们就把它接在一起，那就變成完整的address，那這個指到的就是我真的的physical address好，所以這邊有一些簡單的例子然後我們下面這邊還有更多像 page size 像剛剛提到的，如果是一個 kb 二的十次方嘛，所以你馬上你腦袋就要想到這個系統裡面我的第一的 bit 數其實是十個然後如果我今天給你一堆 01010101，你就把後面的十個數字先把它切出來，那個就是我的 page 的 offset了，

其實這邊的例子來講假設我們前面說這邊 asset 只要這個值就是 2，剩下這些值你把它翻譯出來假設 2 的話就代表要去看這個這個 table 裡面的2 的位置，所以 2 因為從 0 開始大家不要忘記是 0 1 2 3 4 從 0 開始所以其實是第三個位置2 的話其實對到是第三個位置那假設我們知道裡面存的是 5，他說是第五個 frame 對不對這其實這一個 page 被 locate 在第五個 frame 的話那

因為每一個frame大小是固定的嘛所以第五個frame你其實自己算一下就知道它的base address是多少了也就是你的frame的size當然equal to page size乘上5那就是你的base address了對不對然後相加那你就可以得到答案了所以這個大家看一下知道對不對所以假設我們今天說有13個所以代表這一共有13個可是

我們知道後面的10個全部是offset所以只剩下前面的3個是我們的page number的部分對不對所以我們就把它轉換成可以看見就會是這個第5個對不對這個page number這邊是第2個啦上面的是我們是這邊是答案的這邊是答案所以是第二個我們已經說他是指到第五個frame所以這邊我們會只花把

2只要是2我們把它替換成5對不對然後5就加上去就好了對加上原來的offset就會是答案了這樣你就完成一個address translation好所以你要理解這個概念非常非常重要因為在任何電腦系統的設計我們隨時會因為我們的需求我們會改變譬如說page的size或者說logical address的bit的數量因為bit的數

量這整個total的數量就等於我在control一個process在這台電腦系統上最大的memory allocation是多少其實這就決定了然後當然還有就是這些你的一個page size加上去之後你才可以做translation所以這些數字都會因為需求系統的設計而改變但是轉換的原理Translation的方式其實是沒有變的只要他用所謂的Paging就是這個意思所以這個非常非常重要大家一定要

自己去把它想清楚這邊我列了一大堆的問題都是非常非常typical的問題所以回去之後至少考試前你一定要能夠有辦法自己能夠回答這些問題才對然後再去做變通怎麼樣去Translate一個AddressFigure out到底這個電腦系統有多少個bit是page number多少個bit是page offset然後page size是多少page table的size是多

少等等好所以你看像這邊我們又有一個比較複雜比較多的這個例子像是32bit嘛那我們說36個physical喔所以你可以看見真實的系統logical address的bit的數量沒有一定要等於physical喔這個沒有關聯性喔反正你是mapping你只要能夠translate出來就可以意思就是說只要是一個unique的logical address你可以map到一個這個unique的physical address的位置的話就可以了但是這兩個bit數沒有人說要一樣對不對

你會問我說那為什麼那剩下的空間要給誰用不要忘記這只是一支程式嘛對不對我們有好多程式啊所以我剩下的空間我可以是別的這些程式來使用的不一定是 assign 給這個程式尤其是我們後面會介紹segment 的時候大家就知道了其實還有另外一個 layer所以其實是可以使用更多的空間就是說 physical 的甚至可以 logical

還大反過來原理也是一樣因為有 virtual memory所以我的 logical 可以大於我的 physical 對不對反正指不到的我其實是虛擬的是指到 disk 上面的一個位置好所以像這邊所以像這邊我給你很簡單三個information對不對比如說你就可以推出來一些東西像page table的size該多少也就是剛剛那個table那所謂size是多少個entry啦這邊那所以我們知道一共對不對是page table的size意思就是有多少個pages的意思嘛對不對所以它一共是2的32次方對不對那

一個Page是4KB所以是2的12次方對不對所以相除是不是就等於我有多少個Page Number了？對不對，相除之後就是2的24個Entry，所以就最多我可以有2的20次方個Pages沒錯吧？對不對，所以我的Table就會長這麼大，是Based on我的Program，這邊扣掉Page Size之後，對 除掉之後，我剩下的Bit就全部拿去描述我是第幾個Page嗎？

所以就相處就可以得到這個答案，那就剛才說的啦！那一個Program最大的Memory是多少？其實就是32次方嘛對不對，所以就是2的32次方嘛！所以當然，所以你的Logical Address的bit的數量就已經是綁得住這個程式最大可以Allocate的空間，所以4GB，那裡來的這裡來的啊早期電腦為什麼沒有辦法超過4GB？因為它沒有 address 的去描述它了，就只是這樣，所以就算你有錢，你有硬體，你一直加是沒有意義的，因為這裡沒有辦法翻譯好，但是 physical 的 memory size

大家不要忘了，就要去看 physical address，所以同理應該是 36 次放，所以這兩個 size 不一定要 match，所以要注意到，只要是 physical 你就要去想到physical address，如果是logical或program，你看到的是logical，這邊唯一共通的是那個page的size，那還有像這個number of bits for page number嘛對不對所以其實跟第一個是一樣的意思啊對不對只是說不要忘記這邊說number of bits所以你其實只要寫20就好了嘛對不對那還有一個啦有時候我們會問說那你page table的size in terms of number of bytes

那這個時候你就要注意是Entry的數量要乘上每一個Entry它有多少個Byte那Byte的數量通常我們都會跟你講就是通常是4個Megabyte就是要描述一個Address所以你就要再乘上每一個Entry的到底需要多少空間這件事情所以自己要注意一下問的問題到底是幾個Entry還是多少個Size就是多少個儲存空間還是說你只在問多少個Bit

稍微留意這些小的一些細節那number of bit for frame number對不對所以frame number的話其實跟這一樣只是要注意到frame我們就要去看physical所以是36除掉10的12次方了對不對所以而不是32所以其實是24個bit就會比較多它的size會比較多一點好所以這最後一個啦其實這個number of bit for page offset這個就很單純這個就

是page offset你就要想page takepage image的sizepage sizepage size是kb嘛所以是12個bit描述它所以大概是這樣子啦這是非常typical的一些問題你光我就給你三個數字你可以發現居然可以推敲出這麼多的關聯性出來那不用死背你就去想那個它運作的原理對不對你就知道是哪個數字跟哪個數字該去處於它或是怎麼樣

去描述它好所以那邊概念很重要然後不要忘記自己去練習一下去想一下這些到底怎麼樣子可以推出這些數字的好那講完Page的這個Translation之後可以看見我們接下來知道怎麼translate可是我們在allocate的時候我們必須要知道哪些frame是空的對不對所以在OS裡面它在做allocation為了要做allocation

很快的能夠找到這些有空的frame的話其實會有一個free的frame list這其實很單純的你可以想見就是一個簡單的link list然後把這些free的呢就全部都放到這個list裡面去然後只要有一個program一個process要被create的時候他有一個Page要去找一個Friend去擺的時候他只要從這個List裡面就是pop out一個最上面的就可以

啦因為Discontinuous嘛所以任何一個Friend都可以所以我們不care就只要一個List然後只要有我們就會把它放進我們的這個Process的Page Table裡面這樣就完成了一個Assignment的動作就等於在Allocate了所以其實就是透過這個有一個Free的Friend List會被maintain by這個OS然後很簡單就是非常快就是all the one而已就一直pop出來就可以了那當然有人free了也很簡單啊所以有一個程式比如說我們被delete掉kill掉了那我們

說free memory什麼意思呢就是去看他的page table嘛哪些frame是他用的我們就把他free掉就是把他放到這個frame list就好了那他就可能會被別人給使用好好那這個Page裡面呢我們之前也提到了已經有一個對於這個電腦系統效能很關鍵的東西一個Setting就是這個Page的Size因為不管你的Physical跟這個Logical這邊它的Total的Memory Size是多少唯一一個共同的大家看到的就是Page的Size對不對兩邊一定要都Match

所以這個Page Size並不會是隨便亂設而且對效能影響很大第一個幾個原則這個Size一定是Power of 2這不用講因為大家可以看見剛剛的Operation都是Bit Operation所以如果你是Power of 2我才可以辦法用這些很快的Logical的N OR這些Operation去處理才快，不然還Translate成十進位再二進位大家都知道很囉嗦而且會造很多問題那一般的系統通常是從512MB到16MB都有所以其實它是一個都有可能的看你的系統的一些特色那這個意思那這個意思就是它通常它的Page它的Size通常就是4KB或者是8KB所以其實常見我們說4KB的Page從哪來就是指這個Page Size大部分電腦是4KB的

好那這個size 4KB那4KB或8KB是比較常見的啦那如果我把它調小一點也就是譬如說我把它調512或調大我們先看調大調大也就是說我就用到譬如說16MB好了很大的數字的話這代表什麼意思呢剛剛問過了Internal fragmentation會很嚴重對不對所以這是為什麼我們不會喜歡把它設太大的主要原因在這裡你會浪費空間那很多程式我們知道都很小的用EMB幾KB而已對不對所以這是為什麼

我們不會看見16MB這件事情所謂大真實系統看到可能就是8KB而已我們看見這個數字而已好那你說好吧那我就變小那我這個問題就解決了嘛對不对可是它的缺點在哪咧它的缺點在於說，如果你的Page Size很小的話，你可以想見我們現在的Physical的Memory是不是都越來越大。 kita電腦就96GB的Memory。如果是Server等級的，你自己的電腦都16GB了跟兩三年前也是大很多了

對，那logical的address size更不用講。我們早期有4GB的限制，現在我們是64bit的電腦所以你可以看你可以allocate非常非常大的memory對不對。所以當你的這些memory越大意思是什麼勒就是你整個address的bit數量非常多我們剛才才算過對不对。如果bit數量非常多然後你的page很小意思是你的page number是不是很多了很簡單的道理嘛對不对反正不是page大page size大

就是你Page Number大對不对。所以如果你把Page Size調小Page Number大的意思是什麼你的Table是不是變得很大對不对那一大起來第一個你要存Page Table我們說每個Process都要存喔所以你OS會浪費不少空間在存這些東西那所以就會造成它的這個效能會造成其實會造成OS這邊Memory空間的浪費第二點其實非常重要的是

當你程式大的意思就是代表你的程式其實會跳來跳去對不对那所以說你會發現你跑一個程式，你會需要Access的Page的數量會非常多，因為你一個很小嘛，所以同樣讀4KB本來是一個Page就好，如果你把這Size變成1KB你就要讀4個了，对不对，所以我們馬上就會看見你每讀一個Page你要去找他的所以你都要花時間，

那甚至於是這些就很容易被放到這個Disk去，因為非常非常的多嘛，那所以你就沒有辦法一次把他們全部抓到Memory，你變成一次一次然後從Disk抓會非常的慢。我們知道讀資料最好就是一次讀一堆會比較有效率，所以通常效能就開始往下掉，這就是為什麼我們的Page Size通常是4KB純粹是經驗法則啦，但是為什麼不會想要往下，因為大家就發現

run一般的application電腦變慢了，因為這些原因，因為你要access太多的page每次就讀，那麼一點點這樣很小很小氣的這樣，這個就會變得很慢尤其我們講到後面的等一下講到了這個怎麼去真的去load一個page還有跟disk的關係，你就會發現非常的慢，所以最好一次就讀多一點，這是最好的好，所以這是Page Size的

設定4KB 8KB大家可以有個概念4KB老師會講這個Magic Number就是因為它是Page Size的這個大小一般電腦好，那這是Summary所以我們可以看見Paging這邊有非常多重要的事情，那第一個就是這個Paging，它就像Page Table的目的，就是要做Translation，所以它可以把我們說的Physical跟Logical的Memory切開對不對，就靠這個Page Table就好然後呢，這個切開不僅是切開而已，而且它是discontinuous，所以說對於使用者，它的 logical space always 是連續的對不對，可是在 physical

卻不是我們看到它可以散落，所以變成意思就是說它不影響使用者 program 的複雜度，但是可以幫助系統，它很有效地去使用這些 physical memory 的space，所以是一個非常必要的一件事情然後，OS為了這件事，他必須要去maintain這個page table然後，還要在wrong time就是wrong time，我們剛才說過的他去translate，那因為很慢，因為這要花時間，所以大家用hardware去做這件事情

好，那不過，你說有page table，那不是也有所謂的frame table咧那答案是有的所謂frame table，就是剛好倒過來的意思，就是說這個table裡面存的就只是每一個frame，它裡面存的是哪一個processed的page，那這個用途，其實如果你是用paging的這種方式它的意義不大，它純粹只是accounting，啦！它不part of the translation，它只是accounting就是good to know而已，你就

這樣想就好，所以它會keep，但通常並不會去真的去用它或許一些Debugging特殊狀況才會去用它唯一的特例我們最後會提到其實Paging這個Translation有很多種Implementation的方式最後我們會提到一個叫做Inverted，它就是用Frame Table没有特例一般電腦很少用這個方式做Translation，我們等一下就會介紹到為什麼了.