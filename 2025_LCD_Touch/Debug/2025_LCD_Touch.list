
2025_LCD_Touch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000414  0800041c  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000414  08000414  0001041c  2**0
                  CONTENTS
  4 .ARM          00000000  08000414  08000414  0001041c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000414  0800041c  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001041c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001041c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001044c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000528  00000000  00000000  0001048f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002ce  00000000  00000000  000109b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  00010c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007d  00000000  00000000  00010d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000121a  00000000  00000000  00010dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001195  00000000  00000000  00011fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000040e5  00000000  00000000  0001317c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000184  00000000  00000000  00017264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000173e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003fc 	.word	0x080003fc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003fc 	.word	0x080003fc

080001ec <gpio_init>:
#include <stdint.h>
#include <rcc.h>
#include <gpio.h>


void gpio_init(uint8_t port){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
	rcc_enable_ahb1_clock(port);
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f899 	bl	8000330 <rcc_enable_ahb1_clock>
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}

08000206 <gpio_set_mode>:

void gpio_set_mode(uint32_t port_base, uint8_t pin, uint8_t mode){
 8000206:	b580      	push	{r7, lr}
 8000208:	b086      	sub	sp, #24
 800020a:	af00      	add	r7, sp, #0
 800020c:	6078      	str	r0, [r7, #4]
 800020e:	460b      	mov	r3, r1
 8000210:	70fb      	strb	r3, [r7, #3]
 8000212:	4613      	mov	r3, r2
 8000214:	70bb      	strb	r3, [r7, #2]
	uint32_t reg_addr = port_base + GPIO_MODER_OFFSET;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	617b      	str	r3, [r7, #20]
	uint32_t shift = (pin & 0x0F)* 2;
 800021a:	78fb      	ldrb	r3, [r7, #3]
 800021c:	f003 030f 	and.w	r3, r3, #15
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	613b      	str	r3, [r7, #16]
	uint32_t data = ((uint32_t)mode & 3U) << shift;
 8000224:	78bb      	ldrb	r3, [r7, #2]
 8000226:	f003 0203 	and.w	r2, r3, #3
 800022a:	693b      	ldr	r3, [r7, #16]
 800022c:	fa02 f303 	lsl.w	r3, r2, r3
 8000230:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 3U << shift;
 8000232:	2203      	movs	r2, #3
 8000234:	693b      	ldr	r3, [r7, #16]
 8000236:	fa02 f303 	lsl.w	r3, r2, r3
 800023a:	60bb      	str	r3, [r7, #8]
	io_writeMask(reg_addr, data, mask);
 800023c:	68ba      	ldr	r2, [r7, #8]
 800023e:	68f9      	ldr	r1, [r7, #12]
 8000240:	6978      	ldr	r0, [r7, #20]
 8000242:	f000 f85c 	bl	80002fe <io_writeMask>
}
 8000246:	bf00      	nop
 8000248:	3718      	adds	r7, #24
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}

0800024e <gpio_set_outdata>:

void gpio_set_outdata(uint32_t port_base, uint8_t pin, uint8_t val){
 800024e:	b580      	push	{r7, lr}
 8000250:	b086      	sub	sp, #24
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
 8000256:	460b      	mov	r3, r1
 8000258:	70fb      	strb	r3, [r7, #3]
 800025a:	4613      	mov	r3, r2
 800025c:	70bb      	strb	r3, [r7, #2]
	uint32_t reg_addr = port_base + GPIO_ODR_OFFSET;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	3314      	adds	r3, #20
 8000262:	617b      	str	r3, [r7, #20]
	uint32_t shift = (pin & 0x0F);
 8000264:	78fb      	ldrb	r3, [r7, #3]
 8000266:	f003 030f 	and.w	r3, r3, #15
 800026a:	613b      	str	r3, [r7, #16]
	uint32_t data = ((uint32_t)val & 1U) << shift;
 800026c:	78bb      	ldrb	r3, [r7, #2]
 800026e:	f003 0201 	and.w	r2, r3, #1
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	fa02 f303 	lsl.w	r3, r2, r3
 8000278:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 1U << shift;
 800027a:	2201      	movs	r2, #1
 800027c:	693b      	ldr	r3, [r7, #16]
 800027e:	fa02 f303 	lsl.w	r3, r2, r3
 8000282:	60bb      	str	r3, [r7, #8]
	io_writeMask(reg_addr, data, mask);
 8000284:	68ba      	ldr	r2, [r7, #8]
 8000286:	68f9      	ldr	r1, [r7, #12]
 8000288:	6978      	ldr	r0, [r7, #20]
 800028a:	f000 f838 	bl	80002fe <io_writeMask>
}
 800028e:	bf00      	nop
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <main>:
#include <stdint.h>
#include <gpio.h>
#include <rcc.h>

int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	gpio_init(RCC_AHB1EN_GPIOG);
 800029c:	2006      	movs	r0, #6
 800029e:	f7ff ffa5 	bl	80001ec <gpio_init>
	gpio_set_mode(GPIOG_BASE, GPIO_PIN_13, GPIO_MODE_OUTPUT);
 80002a2:	2201      	movs	r2, #1
 80002a4:	210d      	movs	r1, #13
 80002a6:	4809      	ldr	r0, [pc, #36]	; (80002cc <main+0x34>)
 80002a8:	f7ff ffad 	bl	8000206 <gpio_set_mode>
	gpio_set_outdata(GPIOG_BASE, GPIO_PIN_13, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	210d      	movs	r1, #13
 80002b0:	4806      	ldr	r0, [pc, #24]	; (80002cc <main+0x34>)
 80002b2:	f7ff ffcc 	bl	800024e <gpio_set_outdata>
	gpio_set_mode(GPIOG_BASE, GPIO_PIN_14, GPIO_MODE_OUTPUT);
 80002b6:	2201      	movs	r2, #1
 80002b8:	210e      	movs	r1, #14
 80002ba:	4804      	ldr	r0, [pc, #16]	; (80002cc <main+0x34>)
 80002bc:	f7ff ffa3 	bl	8000206 <gpio_set_mode>
	gpio_set_outdata(GPIOG_BASE, GPIO_PIN_14, 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	210e      	movs	r1, #14
 80002c4:	4801      	ldr	r0, [pc, #4]	; (80002cc <main+0x34>)
 80002c6:	f7ff ffc2 	bl	800024e <gpio_set_outdata>
    while (1)
 80002ca:	e7fe      	b.n	80002ca <main+0x32>
 80002cc:	40021800 	.word	0x40021800

080002d0 <io_write>:
 */


#include <stdint.h>

void io_write(register uint32_t addr, register uint32_t val) {
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	4602      	mov	r2, r0
 80002d6:	460b      	mov	r3, r1
    /**
     * r is put the value to general register
     * Qo is let the input be memory address, arm specific
     */
    asm volatile("str %1, %0"
 80002d8:	6013      	str	r3, [r2, #0]
            : : "Qo" (*(volatile uint32_t *) addr), "r" (val));
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <io_read>:

uint32_t io_read(register uint32_t addr) {
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
    /**
     * r is put the value to general register
     * Qo is let the input be memory address, arm specific
     */
	uint32_t val;
    asm volatile("ldr %0, %1"
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	607b      	str	r3, [r7, #4]
            : "=r" (val)
            : "Qo" (*(volatile uint32_t *) addr));
    return val;
 80002f0:	687b      	ldr	r3, [r7, #4]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <io_writeMask>:

void io_writeMask(uint32_t addr, uint32_t data, uint32_t mask) {
 80002fe:	b580      	push	{r7, lr}
 8000300:	b084      	sub	sp, #16
 8000302:	af00      	add	r7, sp, #0
 8000304:	60f8      	str	r0, [r7, #12]
 8000306:	60b9      	str	r1, [r7, #8]
 8000308:	607a      	str	r2, [r7, #4]
	io_write(addr, (io_read(addr) & ~mask) | (data & mask));
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f7ff ffea 	bl	80002e4 <io_read>
 8000310:	4602      	mov	r2, r0
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	43db      	mvns	r3, r3
 8000316:	401a      	ands	r2, r3
 8000318:	68b9      	ldr	r1, [r7, #8]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	400b      	ands	r3, r1
 800031e:	4313      	orrs	r3, r2
 8000320:	4619      	mov	r1, r3
 8000322:	68f8      	ldr	r0, [r7, #12]
 8000324:	f7ff ffd4 	bl	80002d0 <io_write>
}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <rcc_enable_ahb1_clock>:

#include <stdint.h>
#include <mem_io.h>
#include <rcc.h>

void rcc_enable_ahb1_clock(uint8_t bit_pos){
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	uint32_t addr = RCC_BASE + RCC_AHB1ENR;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <rcc_enable_ahb1_clock+0x2c>)
 800033c:	60fb      	str	r3, [r7, #12]
	uint32_t bitmask = 1U << bit_pos;
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2201      	movs	r2, #1
 8000342:	fa02 f303 	lsl.w	r3, r2, r3
 8000346:	60bb      	str	r3, [r7, #8]
	io_writeMask(addr, bitmask, bitmask);
 8000348:	68ba      	ldr	r2, [r7, #8]
 800034a:	68b9      	ldr	r1, [r7, #8]
 800034c:	68f8      	ldr	r0, [r7, #12]
 800034e:	f7ff ffd6 	bl	80002fe <io_writeMask>
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40023830 	.word	0x40023830

08000360 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000362:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000364:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <LoopForever+0x6>)
  ldr r1, =_edata
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800036c:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <LoopForever+0xe>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a0a      	ldr	r2, [pc, #40]	; (80003a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000380:	4c0a      	ldr	r4, [pc, #40]	; (80003ac <LoopForever+0x16>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038e:	f000 f811 	bl	80003b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000392:	f7ff ff81 	bl	8000298 <main>

08000396 <LoopForever>:

LoopForever:
  b LoopForever
 8000396:	e7fe      	b.n	8000396 <LoopForever>
  ldr   r0, =_estack
 8000398:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800039c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a4:	0800041c 	.word	0x0800041c
  ldr r2, =_sbss
 80003a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b0:	e7fe      	b.n	80003b0 <ADC_IRQHandler>
	...

080003b4 <__libc_init_array>:
 80003b4:	b570      	push	{r4, r5, r6, lr}
 80003b6:	4d0d      	ldr	r5, [pc, #52]	; (80003ec <__libc_init_array+0x38>)
 80003b8:	4c0d      	ldr	r4, [pc, #52]	; (80003f0 <__libc_init_array+0x3c>)
 80003ba:	1b64      	subs	r4, r4, r5
 80003bc:	10a4      	asrs	r4, r4, #2
 80003be:	2600      	movs	r6, #0
 80003c0:	42a6      	cmp	r6, r4
 80003c2:	d109      	bne.n	80003d8 <__libc_init_array+0x24>
 80003c4:	4d0b      	ldr	r5, [pc, #44]	; (80003f4 <__libc_init_array+0x40>)
 80003c6:	4c0c      	ldr	r4, [pc, #48]	; (80003f8 <__libc_init_array+0x44>)
 80003c8:	f000 f818 	bl	80003fc <_init>
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	2600      	movs	r6, #0
 80003d2:	42a6      	cmp	r6, r4
 80003d4:	d105      	bne.n	80003e2 <__libc_init_array+0x2e>
 80003d6:	bd70      	pop	{r4, r5, r6, pc}
 80003d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003dc:	4798      	blx	r3
 80003de:	3601      	adds	r6, #1
 80003e0:	e7ee      	b.n	80003c0 <__libc_init_array+0xc>
 80003e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e6:	4798      	blx	r3
 80003e8:	3601      	adds	r6, #1
 80003ea:	e7f2      	b.n	80003d2 <__libc_init_array+0x1e>
 80003ec:	08000414 	.word	0x08000414
 80003f0:	08000414 	.word	0x08000414
 80003f4:	08000414 	.word	0x08000414
 80003f8:	08000418 	.word	0x08000418

080003fc <_init>:
 80003fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fe:	bf00      	nop
 8000400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000402:	bc08      	pop	{r3}
 8000404:	469e      	mov	lr, r3
 8000406:	4770      	bx	lr

08000408 <_fini>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr
